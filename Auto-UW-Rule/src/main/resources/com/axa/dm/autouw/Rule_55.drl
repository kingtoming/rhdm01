package com.axa.dm.autouw;

rule "rule_55_init"
    dialect "mvel"
    lock-on-active true
    when
       not Rule55Object() 
    then
        insert(new Rule55Object());
end

rule "rule_55_preparation"
dialect "java"
no-loop true
    when
        $processObj : ProcessObject (rule55Processed == false,$policyList : policy, $appList : application)
        $rule55Obj : Rule55Object (initFlag == false)
//         // ExchangeRateObject(toCurrency == "USD", fromCurrency == "HKD", $exchangeRate : exchangeRate)
        Basic(productType != null,annualRegularPremium != null)
        
        $basicAnnualRegularPremium : Number() from accumulate(
            Basic(productType != null, isValidProduct("WA (Plan A)"), $annualRegularPremium: annualRegularPremium != null),
            sum($annualRegularPremium)
        )
        
        Number($policyCount : intValue()) from accumulate(
            Policy() from $policyList, count(1)
        )
        
        Number(intValue() == $policyCount) from accumulate(
            Policy(productType != null,annualRegularPremiumHkd != null),count(1)
        )
        
        $policyAnnualRegularPremium : Number( ) from accumulate ( 
            Policy( 
                currentRole == "INS", 
                role == "INS" , 
                isInforce(policyStatus) == true, 
                $annualRegularPremium : annualRegularPremiumHkd != null, 
                productType != null, isValidProduct("WA (Plan A)")
                ),
                sum($annualRegularPremium)
        )  
        
        Number($appCount : intValue()) from accumulate(
            Application() from $appList,count(1)
        )
        
        Number(intValue() == $appCount) from accumulate(
            Application(productType != null,annualRegularPremiumHkd != null),count(1)
        )
        
        $applicationAnnualRegularPremium : Number( ) from accumulate ( 
            Application( 
                currentRole == "INS", 
                role == "INS", 
                isActive(applicationStatus), 
                $annualRegularPremium : annualRegularPremiumHkd != null, 
                productType != null, isValidProduct("WA (Plan A)")
            ),
            sum($annualRegularPremium)
        )
    then
//         //System.out.println("rule 55 init");
        $rule55Obj.setInitFlag( true );
        BigDecimal totalAnnualPremium = 
                    new BigDecimal(
                        $applicationAnnualRegularPremium.toString()).add(new BigDecimal($policyAnnualRegularPremium.toString())
                        .add(new BigDecimal($basicAnnualRegularPremium.toString()))
                    );
        $rule55Obj.setTotalAnnualPremium(totalAnnualPremium);
        update($rule55Obj);
end

rule "rule_55_condition_1"
dialect "java"
no-loop true
    when
        $processObj : ProcessObject (rule55Processed == false)
        $rule55Obj : Rule55Object (initFlag == true, condition1Processed == false, $totalAnnualPremium: totalAnnualPremium != null)
        $currentApplication: CurrentApplication ($declareExceedLimitWA: declareExceedLimitWA == true)
        // ExchangeRateObject(toCurrency == "USD", fromCurrency == "HKD", $exchangeRate : exchangeRate)
        eval($totalAnnualPremium.compareTo(new BigDecimal("1600000")) <= 0)
    
      then
        //System.out.println("rule_55_condition_1");
        $rule55Obj.setCondition1Processed(true);
        update($rule55Obj);
end

rule "rule_55_condition2"
dialect "java"
no-loop true
    when
        $processObj : ProcessObject (rule55Processed == false)
        $rule55Obj : Rule55Object (initFlag == true, condition2Processed == false, $totalAnnualPremium: totalAnnualPremium != null)
        // ExchangeRateObject(toCurrency == "USD", fromCurrency == "HKD", $exchangeRate : exchangeRate)
        $currentApplication: CurrentApplication ($declareExceedLimitWA: declareExceedLimitWA == false)
        eval($totalAnnualPremium.compareTo(new BigDecimal("1600000")) > 0)
    
      then
        //System.out.println("rule_55_condition2");
        $rule55Obj.setCondition2Processed(true);
        update($rule55Obj);
end

rule "rule_55_final"
dialect "java"
no-loop true
    when
        $processObj : ProcessObject (rule55Processed == false, $policyList : policy != null)
        $rule55Obj : Rule55Object (initFlag == true, (condition1Processed == true || condition2Processed == true) , $totalAnnualPremium: totalAnnualPremium != null)
        $currentApplication: CurrentApplication ($declareExceedLimitWA: declareExceedLimitWA != null, $formId : formId)
        // Product( productType in ( "WA" ) , $validPlanCode : planCode)
        $individualResult : IndividualResult(ruleNo == "55")
        $ruleObj : RuleObject( ruleNo == "55" )
        Result( $individualResultList : individualResult)
      then
        List failedReasons = new ArrayList<String>();
		failedReasons.add("The Total Annual Premium of Wealth Advance Plan A does not matched with the one declared by client. ");   
		List otherDetails = new ArrayList<OtherDetailObj>();
		java.text.DecimalFormat df = new java.text.DecimalFormat(Constants.decimalFormatString);
		//System.out.println("rule_55_final");
		 OtherDetailObj o1 = new OtherDetailObj();
         o1.setName("Declaration Answer");
         String ans = "";
         if($declareExceedLimitWA){
             ans = "Yes";
         }else{
             ans = "No";
         }
         o1.setValue(ans);
         otherDetails.add(o1);
         
         OtherDetailObj o2 = new OtherDetailObj();
         o2.setName("Declaration Total Annual Premium of WA Plan A");
         o2.setValue("HKD"+df.format($totalAnnualPremium));
         otherDetails.add(o2);
         
         OtherDetailObj o3 = new OtherDetailObj();
         o3.setName("Previous WA Plan A Policy No");
         List<String> pl = new ArrayList<>();
         for(int i=0; i<$policyList.size();i++){
          Policy p = (Policy) $policyList.get(i);
            if(p.isValidProduct("")){
                pl.add(p.getPolicyNo());
            }
         }
         o3.setValue(String.join(", ", pl));
         otherDetails.add(o3);
		 
		InsuredIndividual $insuredIndividual = new InsuredIndividual();
		$insuredIndividual.setFailedReasons(failedReasons);
		$insuredIndividual.setDecision("Fail");
		$insuredIndividual.setOtherDetails(otherDetails);
        $individualResult.setInsuredIndividual($insuredIndividual);
        
        $individualResult.setRuleNo($ruleObj.getRuleNo());
        $individualResult.setDecision("Fail");
        $individualResult.setRuleName($ruleObj.getRuleName());
        $individualResult.setMessageToClientEng($ruleObj.getMessageToClientEng());
        $individualResult.setMessageToClientChi($ruleObj.getMessageToClientChi());
        
        $individualResultList.add($individualResult);
        $processObj.setRule55Processed(true);
        update($processObj);
        long dateDiff = new Date().getTime() - $processObj.getStartTime().getTime();
        Utils.loggingTime($ruleObj.getRuleNo(),dateDiff);
        Utils.loggingDebug("Form ID: "+$formId + " | " + $individualResult.toJson());
        
end