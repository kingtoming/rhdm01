package com.axa.dm.autouw;

rule "init Rule_23 Object"
    dialect "java"
    when
        not Rule23Obj()
    then
        insert(new Rule23Obj());
end

rule "Rule_23 current insured as previous insured"
    dialect "java"
    when
        ProcessObject ( rule23Processed == false)
        CurrentApplication ( policyLocationCode != "MCP")
        $rule23Obj : Rule23Obj( currentInsuredFlag == false)
        exists(
            //************** Current insured as previous insured ******************
            Policy (Constants.insured.equals(currentRole), 
                    Constants.insured.equals(role), isInforce(policyStatus) == true,
                    standardClass == false || tempLoading.compareTo(BigDecimal.ZERO) == 1 || exclusionCodeStatus == "U",
					dateofSubmissionCal != null,
                    Utils.workWithDates(new Date(), "-", 2, 24).before(dateofSubmissionCal)
            )
            or 
            PolicyRider (Constants.insured.equals(currentRole), 
                    Constants.insured.equals(role), "".equals(riderStatus.trim()),
                    standardClass == false || tempLoading.compareTo(BigDecimal.ZERO) == 1,
					dateofSubmissionCal != null,
                    Utils.workWithDates(new Date(), "-", 2, 24).before(dateofSubmissionCal)
            )
            or
            Application(Constants.insured.equals(currentRole), 
                        Constants.insured.equals(role),
                        isActive(applicationStatus),
                        standardClass == false || tempLoading.compareTo(BigDecimal.ZERO) == 1 || exclusionCodeStatus == "U",
						dateofSubmissionCal != null,
                        Utils.workWithDates(new Date(), "-", 2, 24).before(dateofSubmissionCal)
            )
            or 
            ApplicationRider(Constants.insured.equals(currentRole), 
                        Constants.insured.equals(role),
                        isActive(applicationStatus),
                        standardClass == false || tempLoading.compareTo(BigDecimal.ZERO) == 1,
						dateofSubmissionCal != null,
                        Utils.workWithDates(new Date(), "-", 2, 24).before(dateofSubmissionCal)
            )
            //********************************************************************
            or
            //************** Current insured as previous owner for WPD/WPDD ******************
            Policy (Constants.insured.equals(currentRole), 
                    Constants.owner.equals(role), isInforce(policyStatus) == true,
                    productType !=null , isValidProduct ("WPD","WPDD"),
                    standardClass == false || tempLoading.compareTo(BigDecimal.ZERO) == 1 || exclusionCodeStatus == "U",
					dateofSubmissionCal != null,
                    Utils.workWithDates(new Date(), "-", 2, 24).before(dateofSubmissionCal)
            )
            or 
            PolicyRider (Constants.insured.equals(currentRole), 
                    Constants.owner.equals(role), "".equals(riderStatus.trim()),
                    productType !=null , isValidProduct ("WPD","WPDD"),
                    standardClass == false || tempLoading.compareTo(BigDecimal.ZERO) == 1,
					dateofSubmissionCal != null,
                    Utils.workWithDates(new Date(), "-", 2, 24).before(dateofSubmissionCal)
            )
            or
            Application(Constants.insured.equals(currentRole), 
                        Constants.owner.equals(role),
                        isActive(applicationStatus),
                        productType !=null , isValidProduct("WPD","WPDD"),
                        standardClass == false || tempLoading.compareTo(BigDecimal.ZERO) == 1 || exclusionCodeStatus == "U",
						dateofSubmissionCal != null,
                        Utils.workWithDates(new Date(), "-", 2, 24).before(dateofSubmissionCal)
            )
            or 
            ApplicationRider(Constants.insured.equals(currentRole), 
                        Constants.owner.equals(role),
                        isActive(applicationStatus),
                        productType !=null , isValidProduct("WPD","WPDD"),
                        standardClass == false || tempLoading.compareTo(BigDecimal.ZERO) == 1,
						dateofSubmissionCal != null,
                        Utils.workWithDates(new Date(), "-", 2, 24).before(dateofSubmissionCal)
            )
            //********************************************************************************
        )
    then
       $rule23Obj.setCurrentInsuredFlag(true);
       update($rule23Obj);
end


rule "Rule_23 current owner as previous owner"
    dialect "java"
    when
        ProcessObject ( rule23Processed == false)
        CurrentApplication ( policyLocationCode != "MCP")
        $rule23Obj : Rule23Obj( currentInsuredFlag == false)
        exists(
            //************** Current owner as previous owner ******************
            Policy (Constants.owner.equals(currentRole), 
                    Constants.owner.equals(role), isInforce(policyStatus) == true,
                    standardClass == false || tempLoading.compareTo(BigDecimal.ZERO) == 1 || exclusionCodeStatus == "U",
					dateofSubmissionCal != null,
                    Utils.workWithDates(new Date(), "-", 2, 24).before(dateofSubmissionCal)
            )
            or 
            PolicyRider (Constants.owner.equals(currentRole), 
                    Constants.owner.equals(role), "".equals(riderStatus.trim()),
                    standardClass == false || tempLoading.compareTo(BigDecimal.ZERO) == 1,
					dateofSubmissionCal != null,
                    Utils.workWithDates(new Date(), "-", 2, 24).before(dateofSubmissionCal)
            )
            or
            Application(Constants.owner.equals(currentRole), 
                        Constants.owner.equals(role),
                        isActive(applicationStatus),
                        standardClass == false || tempLoading.compareTo(BigDecimal.ZERO) == 1 || exclusionCodeStatus == "U",
						dateofSubmissionCal != null,
                        Utils.workWithDates(new Date(), "-", 2, 24).before(dateofSubmissionCal)
            )
            or 
            ApplicationRider(Constants.owner.equals(currentRole), 
                        Constants.owner.equals(role),
                        isActive(applicationStatus),
                        standardClass == false || tempLoading.compareTo(BigDecimal.ZERO) == 1,
						dateofSubmissionCal != null,
                        Utils.workWithDates(new Date(), "-", 2, 24).before(dateofSubmissionCal)
            )
            //********************************************************************
        )
    then
       $rule23Obj.setCurrentOwnerFlag(true);
       update($rule23Obj);
end

rule "Rule_23 conclusion"
    dialect "java"
    when
        $processObj : ProcessObject (rule23Processed == false, $policyList : policy, $applicationList : application, $policyRiderList : policyRider, $applicationRiderList : applicationRider)
        $rule23Obj : Rule23Obj ( currentOwnerFlag == true || currentInsuredFlag == true)
        $resultObj : Result( $individualResultList : individualResult)
        $ruleObj : RuleObject( ruleNo == "23" )
        CurrentApplication ($formId : formId)
    then
        $processObj.setRule23Processed(true);
        IndividualResult $individualResult = new IndividualResult();
        
        if ($rule23Obj.isCurrentOwnerFlag()){
            OwnerIndividual $ownerIndividual = new OwnerIndividual();
            List failedReasons = new ArrayList<String>();
            
            if ($policyList != null){
            for (int i=0;i < $policyList.size();i++){
                Policy tempPolicy = (Policy) $policyList.get(i);
                String reasonStr = "";
                
                if (tempPolicy.isInforce(tempPolicy.getPolicyStatus()) 
                    && Constants.owner.equals(tempPolicy.getCurrentRole()) 
                    && Constants.owner.equals(tempPolicy.getRole())
                    && Utils.workWithDates(new Date(), "-", 2, 24).before(tempPolicy.getDateofSubmissionCal())
                ){
                    if (tempPolicy.getStandardClass() != null && tempPolicy.getStandardClass() == false)
                        reasonStr += "substandard class code";
                    
                    if (tempPolicy.getTempLoading().compareTo(BigDecimal.ZERO) == 1)    
                        reasonStr += "/ loading";
                        
                    if ("U".equals(tempPolicy.getExclusionCodeStatus()))
                        reasonStr += "/ exclusion";
                        
                    if (tempPolicy.getStandardClass() != null && tempPolicy.getStandardClass() == false || tempPolicy.getTempLoading().compareTo(BigDecimal.ZERO) == 1 || "U".equals(tempPolicy.getExclusionCodeStatus())){
                        failedReasons.add("Previous policy " + tempPolicy.getPolicyNo() + " of Proposed Owner has " + reasonStr + " within the 24 months" );
                    }
                }
            }
            }
            
            if ($applicationList != null){
            for (int i=0;i < $applicationList.size();i++){
                Application tempApp = (Application) $applicationList.get(i);
                String reasonStr = "";
                
                if (
                    tempApp.isActive(tempApp.getApplicationStatus()) 
                    && Constants.owner.equals(tempApp.getCurrentRole()) 
                    && Constants.owner.equals(tempApp.getRole())
                    && Utils.workWithDates(new Date(), "-", 2, 24).before(tempApp.getDateofSubmissionCal())
                ){
                    if (tempApp.getStandardClass() != null && tempApp.getStandardClass() == false)
                        reasonStr += "substandard class code";
                    
                    if (tempApp.getTempLoading().compareTo(BigDecimal.ZERO) == 1)    
                        reasonStr += "/ loading";
                        
                    if ("U".equals(tempApp.getExclusionCodeStatus()))
                        reasonStr += "/ exclusion";
                        
                    if ((tempApp.getStandardClass() != null && tempApp.getStandardClass() == false) || tempApp.getTempLoading().compareTo(BigDecimal.ZERO) == 1 || "U".equals(tempApp.getExclusionCodeStatus())){
                        failedReasons.add("Previous application " + tempApp.getApplicationNo() + " of Proposed Owner has " + reasonStr + " within the 24 months" );
                    }
                }
            }
            }
            
            $ownerIndividual.setFailedReasons(failedReasons);
            $ownerIndividual.setDecision(Constants.failDecision);
            $individualResult.setOwnerIndividual($ownerIndividual);
        }
        
        if ($rule23Obj.isCurrentInsuredFlag()){
            InsuredIndividual $insuredIndividual = new InsuredIndividual();
            List failedReasons = new ArrayList<String>();
            
            if ($policyList != null){
            for (int i=0;i < $policyList.size();i++){
                Policy tempPolicy = (Policy) $policyList.get(i);
                String reasonStr = "";
                
                if (
                    tempPolicy.isInforce(tempPolicy.getPolicyStatus()) 
                    && Constants.insured.equals(tempPolicy.getCurrentRole()) 
                    && Constants.insured.equals(tempPolicy.getRole())
                    && Utils.workWithDates(new Date(), "-", 2, 24).before(tempPolicy.getDateofSubmissionCal())
                ){
                    if (tempPolicy.getStandardClass() != null && tempPolicy.getStandardClass() == false)
                        reasonStr += "substandard class code";
                    
                    if (tempPolicy.getTempLoading().compareTo(BigDecimal.ZERO) == 1)    
                        reasonStr += "/ loading";
                        
                    if ("U".equals(tempPolicy.getExclusionCodeStatus()))
                        reasonStr += "/ exclusion";
                        
                    if ((tempPolicy.getStandardClass() != null && tempPolicy.getStandardClass() == false) || tempPolicy.getTempLoading().compareTo(BigDecimal.ZERO) == 1 || "U".equals(tempPolicy.getExclusionCodeStatus())){
                        failedReasons.add("Previous policy " + tempPolicy.getPolicyNo() + " of Proposed Insured has " + reasonStr + " within the 24 months" );
                    }
                }
            }
            }
            
            if ($applicationList != null){
            for (int i=0;i < $applicationList.size();i++){
                Application tempApp = (Application) $applicationList.get(i);
                String reasonStr = "";
                
                if (
                    tempApp.isActive(tempApp.getApplicationStatus()) 
                    && Constants.insured.equals(tempApp.getCurrentRole()) 
                    && Constants.insured.equals(tempApp.getRole())
                    && Utils.workWithDates(new Date(), "-", 2, 24).before(tempApp.getDateofSubmissionCal())
                ){
                    if (tempApp.getStandardClass() != null && tempApp.getStandardClass() == false)
                        reasonStr += "substandard class code";
                    
                    if (tempApp.getTempLoading().compareTo(BigDecimal.ZERO) == 1)    
                        reasonStr += "/ loading";
                        
                    if ("U".equals(tempApp.getExclusionCodeStatus()))
                        reasonStr += "/ exclusion";
                        
                    if ((tempApp.getStandardClass() != null && tempApp.getStandardClass() == false) || tempApp.getTempLoading().compareTo(BigDecimal.ZERO) == 1 || "U".equals(tempApp.getExclusionCodeStatus())){
                        failedReasons.add("Previous application " + tempApp.getApplicationNo() + " of Proposed Insured has " + reasonStr + " within the 24 months" );
                    }
                }
            }
            }
            
            $insuredIndividual.setFailedReasons(failedReasons);
            $insuredIndividual.setDecision(Constants.failDecision);
            $individualResult.setInsuredIndividual($insuredIndividual);
        }
        
        $individualResult.setRuleNo($ruleObj.getRuleNo());
        $individualResult.setDecision(Constants.failDecision);
        $individualResult.setRuleName($ruleObj.getRuleName());
        $individualResult.setMessageToClientEng($ruleObj.getMessageToClientEng());
        $individualResult.setMessageToClientChi($ruleObj.getMessageToClientChi());
                           
        $individualResultList.add( $individualResult );
        update($processObj);
        long dateDiff = new Date().getTime() - $processObj.getStartTime().getTime();
        Utils.loggingTime($ruleObj.getRuleNo(),dateDiff);
        Utils.loggingDebug("Form ID: "+$formId + " | " + $individualResult.toJson());
end
    