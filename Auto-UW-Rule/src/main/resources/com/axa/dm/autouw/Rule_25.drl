package com.axa.dm.autouw;


import java.lang.Number;
import java.util.Date;
import java.util.Arrays;
import java.text.SimpleDateFormat;


rule "Rule_25_init_object"
    dialect "java"
    when
        not (Rule25Object())
    then
        //System.out.println("Rule_25_init_object");
        Rule25Object rule25Obj = new Rule25Object();
        rule25Obj.setPolicyNoInsuredList(new ArrayList());
        rule25Obj.setPolicyNoOwnerList(new ArrayList());
        rule25Obj.setClaimNoOwnerList(new ArrayList());
        rule25Obj.setClaimNoInsuredList(new ArrayList());
        rule25Obj.setDateOfClaimInsuredList(new ArrayList());
        rule25Obj.setDateOfClaimOwnerList(new ArrayList());
        rule25Obj.setLastYmonthsInsuredList(new ArrayList());
        rule25Obj.setLastYmonthsOwnerList(new ArrayList());
        insert(rule25Obj);
    end

rule "Rule_25_Current_Insured"
    dialect "java"
    no-loop true
    when
    $processObj : ProcessObject( rule25Processed == false, $claimList: claim)
    $rule25Obj : Rule25Object(rule25InsuredProcessed == false, $policyNoInsuredList: policyNoInsuredList, $claimNoInsuredList: claimNoInsuredList, $dateOfClaimInsuredList: dateOfClaimInsuredList, $lastYmonthsInsuredList: lastYmonthsInsuredList)
    Product( productType in ( "WPD", "WPDD" ) , $validPlanCode : planCode)
    
    ( 
        Policy ( currentRole == "INS", role == "INS", $policyNo: policyNo, $dateofSubmissionCal: dateofSubmissionCal)
    or Policy ( currentRole == "INS", role == "OWN", policyStatus in ("1","2","5","6","B","F"), planCode == $validPlanCode, $policyNo: policyNo, $dateofSubmissionCal: dateofSubmissionCal)
    )
    
    (  
        ( Claim ( claimStatus.toUpperCase() != "C", policyNo == $policyNo,  daysofDischargeCal != null, daysofDischargeCal.compareTo($processObj.workWithDates(daysofAdmissionCal, "+", 3, 14)) <=0 ,incidentDateCal != null,  incidentDateCal.compareTo($processObj.workWithDates($dateofSubmissionCal, "-", 3, 1))  <=0 ) )
            or
        ( Claim ( claimStatus.toUpperCase() != "C", policyNo == $policyNo,  daysofDischargeCal != null,  daysofDischargeCal.compareTo($processObj.workWithDates(daysofAdmissionCal, "+", 3, 28)) <=0, incidentDateCal != null, incidentDateCal.compareTo($processObj.workWithDates($dateofSubmissionCal, "-", 3, 6)) <=0) )
            or
        ( Claim ( claimStatus.toUpperCase() != "C", policyNo == $policyNo,  daysofDischargeCal != null, daysofDischargeCal.compareTo($processObj.workWithDates(daysofAdmissionCal, "+", 3, 42)) <=0, incidentDateCal != null, incidentDateCal.compareTo($processObj.workWithDates($dateofSubmissionCal, "-", 3, 24))  <=0) )
            or
        ( Claim ( claimStatus.toUpperCase() != "C", policyNo == $policyNo,  daysofDischargeCal != null, daysofDischargeCal.compareTo($processObj.workWithDates(daysofAdmissionCal, "+", 3, 14)) >0  ) )
    ) 


    then
      //System.out.println("Current Insured");
      for(int i=0; i<$claimList.size(); i++){
            Claim c = (Claim) $claimList.get(i);
            
            if(!c.getClaimStatus().toUpperCase().equals("C") && c.getPolicyNo().equals($policyNo) && c.getDaysofDischargeCal().compareTo($processObj.workWithDates(c.getDaysofAdmissionCal(), "+", 3, 14)) <= 0 && c.getIncidentDateCal().compareTo($processObj.workWithDates($dateofSubmissionCal, "-", 3, 1)) <=0 ){
                $policyNoInsuredList.add(c.getPolicyNo());
                $claimNoInsuredList.add(c.getClaimNumber());
                $dateOfClaimInsuredList.add($dateofSubmissionCal);
                $lastYmonthsInsuredList.add("1");
            }else if(!c.getClaimStatus().toUpperCase().equals("C") && c.getPolicyNo().equals($policyNo) && c.getDaysofDischargeCal().compareTo($processObj.workWithDates(c.getDaysofAdmissionCal(), "+", 3, 28)) <= 0 && c.getIncidentDateCal().compareTo($processObj.workWithDates($dateofSubmissionCal, "-", 3, 6)) <=0 ){
                $policyNoInsuredList.add(c.getPolicyNo());
                $claimNoInsuredList.add(c.getClaimNumber());
                $dateOfClaimInsuredList.add($dateofSubmissionCal);
                $lastYmonthsInsuredList.add("6");
            }else if(!c.getClaimStatus().toUpperCase().equals("C") && c.getPolicyNo().equals($policyNo) && c.getDaysofDischargeCal().compareTo($processObj.workWithDates(c.getDaysofAdmissionCal(), "+", 3, 42)) <= 0 && c.getIncidentDateCal().compareTo($processObj.workWithDates($dateofSubmissionCal, "-", 3, 24)) <=0 ){
                $policyNoInsuredList.add(c.getPolicyNo());
                $claimNoInsuredList.add(c.getClaimNumber());
                $dateOfClaimInsuredList.add($dateofSubmissionCal);
                $lastYmonthsInsuredList.add("24");
            }else if(!c.getClaimStatus().toUpperCase().equals("C") && c.getPolicyNo().equals($policyNo) && c.getDaysofDischargeCal().compareTo($processObj.workWithDates(c.getDaysofAdmissionCal(), "+", 3, 14)) > 0  ){
                $policyNoInsuredList.add(c.getPolicyNo());
                $claimNoInsuredList.add(c.getClaimNumber());
                $dateOfClaimInsuredList.add($dateofSubmissionCal);
                $lastYmonthsInsuredList.add("");
            }
      }
        $rule25Obj.setPolicyNoInsuredList($policyNoInsuredList);
        $rule25Obj.setClaimNoInsuredList($claimNoInsuredList);
        $rule25Obj.setDateOfClaimInsuredList($dateOfClaimInsuredList);
        $rule25Obj.setLastYmonthsInsuredList($lastYmonthsInsuredList);
        $rule25Obj.setRule25InsuredProcessed(true);
        update($rule25Obj);
end

rule "Rule_25_Current_Owner"
    dialect "java"
    no-loop true
    when
    $processObj : ProcessObject( rule25Processed == false, $claimList: claim)
    $rule25Obj : Rule25Object(rule25OwnerProcessed == false, $policyNoOwnerList: policyNoOwnerList, $claimNoOwnerList: claimNoOwnerList, $dateOfClaimOwnerList: dateOfClaimOwnerList, $lastYmonthsOwnerList: lastYmonthsOwnerList)
    Product( productType in ( "WPD", "WPDD" ) , $validPlanCode : planCode)
    
    ( Policy ( currentRole == "OWN", role == "INS", $policyNo: policyNo, $dateofSubmissionCal: dateofSubmissionCal)
    or Policy ( currentRole == "OWN", role == "OWN", policyStatus in ("1","2","5","6","B","F"), planCode == $validPlanCode, $policyNo: policyNo, $dateofSubmissionCal: dateofSubmissionCal)
    )
    
    (  
        ( Claim ( claimStatus.toUpperCase() != "C", policyNo == $policyNo,  daysofDischargeCal != null, daysofDischargeCal.compareTo($processObj.workWithDates(daysofAdmissionCal, "+", 3, 14)) <=0 , incidentDateCal != null, incidentDateCal.compareTo($processObj.workWithDates($dateofSubmissionCal, "-", 3, 1))  <=0 ) )
            or
        ( Claim ( claimStatus.toUpperCase() != "C", policyNo == $policyNo,   daysofDischargeCal != null, daysofDischargeCal.compareTo($processObj.workWithDates(daysofAdmissionCal, "+", 3, 28)) <=0, incidentDateCal != null, incidentDateCal.compareTo($processObj.workWithDates($dateofSubmissionCal, "-", 3, 6))  <=0) )
            or
        ( Claim ( claimStatus.toUpperCase() != "C", policyNo == $policyNo,   daysofDischargeCal != null, daysofDischargeCal.compareTo($processObj.workWithDates(daysofAdmissionCal, "+", 3, 42)) <=0, incidentDateCal != null, incidentDateCal.compareTo($processObj.workWithDates($dateofSubmissionCal, "-", 3, 24))  <=0) )
            or
        ( Claim ( claimStatus.toUpperCase() != "C", policyNo == $policyNo,   daysofDischargeCal != null, daysofDischargeCal.compareTo($processObj.workWithDates(daysofAdmissionCal, "+", 3, 14)) >0  ) )
    ) 


    then
      //System.out.println("Current Owner");
      
      for(int i=0; i<$claimList.size(); i++){
            Claim c = (Claim) $claimList.get(i);
            
            if(!c.getClaimStatus().toUpperCase().equals("C") && c.getPolicyNo().equals($policyNo) && c.getDaysofDischargeCal().compareTo($processObj.workWithDates(c.getDaysofAdmissionCal(), "+", 3, 14)) <= 0 && c.getIncidentDateCal().compareTo($processObj.workWithDates($dateofSubmissionCal, "+", 3, 1)) <=0 ){
                $policyNoOwnerList.add(c.getPolicyNo());
                $claimNoOwnerList.add(c.getClaimNumber());
                $dateOfClaimOwnerList.add($dateofSubmissionCal);
                $lastYmonthsOwnerList.add("1");
            }else if(!c.getClaimStatus().toUpperCase().equals("C") && c.getPolicyNo().equals($policyNo) && c.getDaysofDischargeCal().compareTo($processObj.workWithDates(c.getDaysofAdmissionCal(), "+", 3, 28)) <= 0 && c.getIncidentDateCal().compareTo($processObj.workWithDates($dateofSubmissionCal, "+", 3, 6)) <=0 ){
                $policyNoOwnerList.add(c.getPolicyNo());
                $claimNoOwnerList.add(c.getClaimNumber());
                $dateOfClaimOwnerList.add($dateofSubmissionCal);
                $lastYmonthsOwnerList.add("6");
            }else if(!c.getClaimStatus().toUpperCase().equals("C") && c.getPolicyNo().equals($policyNo) && c.getDaysofDischargeCal().compareTo($processObj.workWithDates(c.getDaysofAdmissionCal(), "+", 3, 42)) <= 0 && c.getIncidentDateCal().compareTo($processObj.workWithDates($dateofSubmissionCal, "+", 3, 24)) <=0 ){
                $policyNoOwnerList.add(c.getPolicyNo());
                $claimNoOwnerList.add(c.getClaimNumber());
                $dateOfClaimOwnerList.add($dateofSubmissionCal);
                $lastYmonthsOwnerList.add("24");
            }else if(!c.getClaimStatus().toUpperCase().equals("C") && c.getPolicyNo().equals($policyNo) && c.getDaysofDischargeCal().compareTo($processObj.workWithDates(c.getDaysofAdmissionCal(), "+", 3, 14)) > 0  ){
                $policyNoOwnerList.add(c.getPolicyNo());
                $claimNoOwnerList.add(c.getClaimNumber());
                $dateOfClaimOwnerList.add($dateofSubmissionCal);
                $lastYmonthsOwnerList.add("");
            }
      }
        $rule25Obj.setPolicyNoOwnerList($policyNoOwnerList);
        $rule25Obj.setClaimNoOwnerList($claimNoOwnerList);
        $rule25Obj.setDateOfClaimOwnerList($dateOfClaimOwnerList);
        $rule25Obj.setRule25OwnerProcessed(true);
        $rule25Obj.setLastYmonthsOwnerList($lastYmonthsOwnerList);
        update($rule25Obj);
end


rule "Rule_25_Final"
    dialect "java"
    when
        $processObj : ProcessObject( rule25Processed == false)
        $rule25Obj : Rule25Object( ( (rule25InsuredProcessed == true && $policyNoInsuredList: policyNoInsuredList && $claimNoInsuredList:claimNoInsuredList && $dateOfClaimInsuredList:dateOfClaimInsuredList && $lastYmonthsInsuredList: lastYmonthsInsuredList) 
        || (rule25OwnerProcessed == true && $policyNoOwnerList: policyNoOwnerList && $claimNoOwnerList:claimNoOwnerList &&  $dateOfClaimOwnerList:dateOfClaimOwnerList && $lastYmonthsOwnerList: lastYmonthsOwnerList)  ))
        $resultObj : Result( $individualResultList : individualResult)
        $ruleObj : RuleObject( ruleNo == "25" )
        CurrentApplication ($formId : formId)
    then
  
        //System.out.println("Rule_25_Final");
        $processObj.setRule25Processed( true );
    
        
        IndividualResult $individualResult = new IndividualResult();
        
        // Insured
        if($policyNoInsuredList.size()>0 ){
            List failedReasons = new ArrayList<String>();
             List otherInsuredDetails = new ArrayList<OtherDetailObj>();
                
           for(int i=0; i<$policyNoInsuredList.size();i++ ){
                if($lastYmonthsInsuredList.get(i) == null || $lastYmonthsInsuredList.get(i).equals("")){
                     failedReasons.add("Number of CARE claims exceeds the acceptable limit.");
                } else {
                    failedReasons.add("Number of CARE claims within the last " + $lastYmonthsInsuredList.get(i) + " months exceeds the acceptable limit.");
                }
              
                SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                String dateOfClaims = formatter.format($dateOfClaimInsuredList.get(i));
                
        		OtherDetailObj o = new OtherDetailObj();
                o.setName("Policy Number");
                o.setValue($policyNoInsuredList.get(i) + ", Claim Number: " + $claimNoInsuredList.get(i) + ", Date of Claims Paid: " + dateOfClaims); 
                otherInsuredDetails.add(o);  
        		
           }
            InsuredIndividual $insuredIndividual = new InsuredIndividual();
            $insuredIndividual.setFailedReasons(failedReasons);
            $insuredIndividual.setDecision("Fail");
            $insuredIndividual.setOtherDetails(otherInsuredDetails);
            $individualResult.setInsuredIndividual($insuredIndividual);
        }


        // Owner
        if($policyNoOwnerList.size()>0 ){
            List failedReasons = new ArrayList<String>();
           List otherOwnerDetails = new ArrayList<OtherDetailObj>();
           for(int i=0; i<$policyNoOwnerList.size();i++ ){
               
                 if($lastYmonthsOwnerList.get(i) == null || $lastYmonthsOwnerList.get(i).equals("")){
                     failedReasons.add("Number of CARE claims exceeds the acceptable limit.");
                } else {
                    failedReasons.add("Number of CARE claims within the last " + $lastYmonthsOwnerList.get(i) + " months exceeds the acceptable limit.");
                }
                
                
                SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                String dateOfClaims = formatter.format($dateOfClaimOwnerList.get(i));
                
        		OtherDetailObj o = new OtherDetailObj();
                o.setName("Policy Number");
                o.setValue($policyNoOwnerList.get(i) + ", Claim Number: " + $claimNoOwnerList.get(i) + ", Date of Claims Paid: " + dateOfClaims); 
                otherOwnerDetails.add(o);  
        		
           }
            OwnerIndividual $ownerIndividual = new OwnerIndividual();
            $ownerIndividual.setFailedReasons(failedReasons);
            $ownerIndividual.setDecision("Fail");
            $ownerIndividual.setOtherDetails(otherOwnerDetails);
            $individualResult.setOwnerIndividual($ownerIndividual);
        }
    
        $individualResult.setRuleNo($ruleObj.getRuleNo());
        $individualResult.setDecision("Fail");
        $individualResult.setRuleName($ruleObj.getRuleName());
        $individualResult.setMessageToClientEng($ruleObj.getMessageToClientEng());
        $individualResult.setMessageToClientChi($ruleObj.getMessageToClientChi());
        $individualResultList.add( $individualResult );
        update($processObj);
        long dateDiff = new Date().getTime() - $processObj.getStartTime().getTime();
        Utils.loggingTime($ruleObj.getRuleNo(),dateDiff);
        Utils.loggingDebug("Form ID: "+$formId + " | " + $individualResult.toJson());
   
end
