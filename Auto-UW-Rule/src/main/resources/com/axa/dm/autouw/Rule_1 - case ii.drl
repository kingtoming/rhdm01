package com.axa.dm.autouw;

import java.util.Date;

rule "Rule 1 case ii - Calculate Total Life Sum Insured"
    dialect "mvel"
    when
        $rule1Obj : Rule1Obj(currentLifeSiHkdTemp == null, totalLifeSiHkdTemp == null)
        ProcessObject (applicationCount > 3, $policyList : policy, $policyRiderList : policyRider, $appList : application, $appRiderList : applicationRider)
        CurrentApplication ($riderList : rider, $formId : formId)
        
        //************ Current Application *****************
        $totalBasicSumInsured : Number( ) from accumulate ( Basic( $basicSumInsured : sumInsuredHkd != null, $finLimitMultiplier : finLimitMultiplier != null),
                   sum($basicSumInsured.multiply($finLimitMultiplier))) // current application with basic

        Number( $riderCount : intValue()) from accumulate ( Rider() from $riderList, count(1))
        Number( intValue() == $riderCount) from accumulate ( Rider( $riderSumInsured : sumInsuredHkd != null, $finLimitMultiplier : finLimitMultiplier != null
                  ),count(1))
        $totalRiderSumInsured : (Number( ) from accumulate ( 
                  Rider( $riderSumInsured : sumInsuredHkd != null, $finLimitMultiplier : finLimitMultiplier != null
                  ),
                  sum($riderSumInsured.multiply($finLimitMultiplier)) // current application with rider
              )
          )
          
          //**************************************************
          
          //****************** Policy **********************
          
        Number( $policyCount : intValue() ) from accumulate ( 
            Policy( 
                // Constants.insured.equals(currentRole), 
                // Constants.insured.equals(role), 
                // isInforce(policyStatus) == true
            ) from $policyList, count(1)
        )
        Number ( intValue() == $policyCount ) from accumulate (
            Policy( 
                $policySumInsured : sumInsuredHkd != null, 
                // Constants.insured.equals(currentRole), 
                // Constants.insured.equals(role), 
                // isInforce(policyStatus) == true, 
                $finLimitMultiplier : finLimitMultiplier != null
            ),
                  count(1) // all in-force Basic
        ) 
        
        $totalPolicySumInsured : Number( ) from accumulate ( 
            Policy( 
                $policySumInsured : sumInsuredHkd != null, 
                Constants.insured.equals(currentRole), 
                Constants.insured.equals(role), 
                isInforce(policyStatus) == true, $finLimitMultiplier : finLimitMultiplier != null),
                   sum($policySumInsured.multiply($finLimitMultiplier)) // all in-force Basic
          ) 
            
        Number ($policyRiderCount : intValue()) from accumulate (
            PolicyRider( 
                      Constants.insured.equals(currentRole), 
                      Constants.insured.equals(role), 
                      "".equals(riderStatus.trim())
            ) from $policyRiderList,
            count(1)
        )
        
        Number (intValue() == $policyRiderCount) from accumulate(
            PolicyRider( 
                      $policyRiderSumInsured : sumInsuredHkd != null, 
                      Constants.insured.equals(currentRole), 
                      Constants.insured.equals(role), 
                      "".equals(riderStatus.trim()),
                      $finLimitMultiplier : finLimitMultiplier != null
            ), count(1)
        )
        $totalPolicyRiderSumInsured : Number( ) from accumulate ( 
                  PolicyRider( 
                      $policyRiderSumInsured : sumInsuredHkd != null, 
                      Constants.insured.equals(currentRole), 
                      Constants.insured.equals(role), 
                      "".equals(riderStatus.trim()),
                      $finLimitMultiplier : finLimitMultiplier != null
                  ),
                   sum($policyRiderSumInsured.multiply($finLimitMultiplier)) // selected in-force Policy Rider
          ) 
                   
          //************************************************ 
            
          //***************** Application ********************   
          
          Number ($appCount : intValue()) from accumulate(
              Application( 
                      Constants.insured.equals(currentRole), 
                      Constants.insured.equals(role), 
                      isActive(applicationStatus)
            ) from $appList,count(1)
        )
        
        Number (intValue() == $appCount) from accumulate(
            Application( 
                      $applicationSumInsured : sumInsuredHkd != null, 
                      Constants.insured.equals(currentRole), 
                      Constants.insured.equals(role), 
                      isActive(applicationStatus),
                      $finLimitMultiplier : finLimitMultiplier != null
                  ),count(1)
        )
          $totalApplicationSumInsured : Number( ) from accumulate ( 
                  Application( 
                      $applicationSumInsured : sumInsuredHkd != null, 
                      Constants.insured.equals(currentRole), 
                      Constants.insured.equals(role), 
                      isActive(applicationStatus),
                      $finLimitMultiplier : finLimitMultiplier != null
                  ),
                   sum($applicationSumInsured.multiply($finLimitMultiplier)) // all active application
          )
          
          Number ($appRiderCount : intValue()) from accumulate (
                ApplicationRider( 
                      Constants.insured.equals(currentRole), 
                      Constants.insured.equals(role), 
                      isActive(applicationStatus)
                ) from $appRiderList, count(1)
            )
          
          Number (intValue() == $appRiderCount) from accumulate(
            ApplicationRider( 
                      $applicationRiderSumInsured : sumInsuredHkd != null, 
                      Constants.insured.equals(currentRole), 
                      Constants.insured.equals(role), 
                      isActive(applicationStatus),
                      $finLimitMultiplier : finLimitMultiplier != null
                  ), count(1)
        )
           $totalApplicationRiderSumInsured : Number( ) from accumulate ( 
                  ApplicationRider( 
                      $applicationRiderSumInsured : sumInsuredHkd != null, 
                      Constants.insured.equals(currentRole), 
                      Constants.insured.equals(role), 
                      isActive(applicationStatus),
                      $finLimitMultiplier : finLimitMultiplier != null
                  ),
                   sum($applicationRiderSumInsured.multiply($finLimitMultiplier)) // all active application rider
          )
          
          //**************************************************
    then
        $rule1Obj.setCurrentLifeSiHkdTemp(new BigDecimal($totalBasicSumInsured.toString()).add(new BigDecimal($totalRiderSumInsured.toString())));
        $rule1Obj.setTotalLifeSiHkdTemp(
                new BigDecimal($totalBasicSumInsured.toString()).add(
                new BigDecimal($totalRiderSumInsured.toString())).add(
                new BigDecimal($totalPolicySumInsured.toString())).add(
                new BigDecimal($totalPolicyRiderSumInsured.toString())).add(
                new BigDecimal($totalApplicationSumInsured.toString())).add(
                new BigDecimal($totalApplicationRiderSumInsured.toString()))
            )
            
        Utils.loggingDebug("FormID: " + $formId + "|Current Application Total SI (HKD): "+$rule1Obj.getCurrentLifeSiHkdTemp() + "|Total SI (HKD): " + $rule1Obj.getTotalLifeSiHkdTemp());
        update($rule1Obj);
end


rule "Rule_1 case ii pre-condition not match"
    dialect "mvel"
    when
        exists(
            Policy (
                effectiveDateCal != null,
                standardClass == false || 
                Utils.workWithDates(new Date(),"-",2,6).before(effectiveDateCal) || 
                BigDecimal.ZERO.compareTo(tempLoading) == -1 ||
                BigDecimal.ZERO.compareTo(loading) == -1,
                Constants.insured.equals(currentRole), 
                Constants.insured.equals(role), 
                isInforce(policyStatus) == true
            )
            or
            Insured(age > 60)
            or 
            Rule1Obj (totalLifeSiHkdTemp >= 8000000B)
        )
        ProcessObject (applicationCount > 3)
        CurrentApplication ($formId : formId)
        $insured : Insured (nonMedLifeSiHkd == null,nonMedLifeSiUsd == null )
        Rule1Obj ($totalLifeSiHkdTemp : totalLifeSiHkdTemp != null)
        ExchangeRateObject (fromCurrency == "HKD", toCurrency == "USD", $exchangeRate : exchangeRate)
    then
        Utils.loggingDebug("FormID: " + $formId + "|Rule_1 case ii pre-condition not match");
        $insured.setNonMedLifeSiHkd($totalLifeSiHkdTemp);
        $insured.setNonMedLifeSiUsd($totalLifeSiHkdTemp.multiply($exchangeRate));
        update($insured);
end

rule "Rule_1 case ii pre-condition matches"
    when
        ProcessObject (applicationCount > 3, $policyList : policy, $policyRiderList : policyRider, $appList : application, $appRiderList : applicationRider)
        CurrentApplication($riderList : rider, $formId : formId)
        
        Number ($policyCount : intValue()) from accumulate (
            Policy() from $policyList,count(1)
        )
        Number (intValue() == $policyCount) from accumulate (
            Policy(sumInsuredHkd != null,standardClass != null,finLimitMultiplier != null), count(1)    
        )
        not ( Policy (
                effectiveDateCal != null,
                standardClass == false || Utils.workWithDates(new Date(),"-",2,6).before(effectiveDateCal),
                Constants.insured.equals(currentRole), 
                Constants.insured.equals(role), 
                isInforce(policyStatus) == true) )
        $insured : Insured ( age >=0, age < 61, nonMedLifeSiHkd == null, nonMedLifeSiUsd == null)
        Rule1Obj ($totalLifeSiHkdTemp : totalLifeSiHkdTemp != null, totalLifeSiHkdTemp < 8000000B, $currentLifeSiHkdTemp : currentLifeSiHkdTemp != null)
        ExchangeRateObject (fromCurrency == "HKD", toCurrency == "USD", $exchangeRate : exchangeRate)
        
        // ***** Calculate Total SI of policy, application submitted within 6 months ******
        //************ Current Application *****************
        $totalBasicSumInsured : Number( ) from accumulate ( Basic( $basicSumInsured : sumInsuredHkd != null, $finLimitMultiplier : finLimitMultiplier != null),
                   sum($basicSumInsured.multiply($finLimitMultiplier))) // current application with basic

        Number( $riderCount : intValue()) from accumulate ( Rider() from $riderList, count(1))
        Number( intValue() == $riderCount) from accumulate ( Rider( $riderSumInsured : sumInsuredHkd != null, $finLimitMultiplier : finLimitMultiplier != null
                  ),count(1))
        $totalRiderSumInsured : (Number( ) from accumulate ( 
                  Rider( $riderSumInsured : sumInsuredHkd != null, $finLimitMultiplier : finLimitMultiplier != null
                  ),
                  sum($riderSumInsured.multiply($finLimitMultiplier)) // current application with rider
              )
          )
          
          //**************************************************
          
          //****************** Policy **********************
        
        $totalPolicySumInsured : Number( ) from accumulate ( 
            Policy( 
                $policySumInsured : sumInsuredHkd != null, 
                Constants.insured.equals(currentRole), 
                Constants.insured.equals(role), 
                dateofSubmissionCal != null,
                    Utils.workWithDates(new Date(),"-",2,6).before(dateofSubmissionCal),
                isInforce(policyStatus) == true, $finLimitMultiplier : finLimitMultiplier != null),
                   sum($policySumInsured.multiply($finLimitMultiplier)) // all in-force Basic
          ) 
            
        Number ($policyRiderCount : intValue()) from accumulate (
            PolicyRider() from $policyRiderList,
            count(1)
        )
        
        Number (intValue() == $policyRiderCount) from accumulate(
            PolicyRider( 
                      sumInsuredHkd != null, 
                      finLimitMultiplier != null
            ), count(1)
        )
        $totalPolicyRiderSumInsured : Number( ) from accumulate ( 
                  PolicyRider( 
                      $policyRiderSumInsured : sumInsuredHkd != null, 
                      Constants.insured.equals(currentRole), 
                      Constants.insured.equals(role), 
                      "".equals(riderStatus.trim()),
                      dateofSubmissionCal != null,
                    Utils.workWithDates(new Date(),"-",2,6).before(dateofSubmissionCal),
                      $finLimitMultiplier : finLimitMultiplier != null
                  ),
                   sum($policyRiderSumInsured.multiply($finLimitMultiplier)) // selected in-force Policy Rider
          ) 
                   
          //************************************************ 
            
          //***************** Application ********************   
          
          Number ($appCount : intValue()) from accumulate(
              Application() from $appList,count(1)
        )
        
        Number (intValue() == $appCount) from accumulate(
            Application( 
                      sumInsuredHkd != null, 
                      finLimitMultiplier != null
                  ),count(1)
        )
          $totalApplicationSumInsured : Number( ) from accumulate ( 
                  Application( 
                      $applicationSumInsured : sumInsuredHkd != null, 
                      Constants.insured.equals(currentRole), 
                      Constants.insured.equals(role), 
                      isActive(applicationStatus),
                      dateofSubmissionCal != null,
                    Utils.workWithDates(new Date(),"-",2,6).before(dateofSubmissionCal),
                      $finLimitMultiplier : finLimitMultiplier != null
                  ),
                   sum($applicationSumInsured.multiply($finLimitMultiplier)) // all active application
          )
          
          Number ($appRiderCount : intValue()) from accumulate (
                ApplicationRider() from $appRiderList, count(1)
            )
          
          Number (intValue() == $appRiderCount) from accumulate(
            ApplicationRider( 
                      sumInsuredHkd != null, 
                      finLimitMultiplier != null
                  ), count(1)
        )
           $totalApplicationRiderSumInsured : Number( ) from accumulate ( 
                  ApplicationRider( 
                      $applicationRiderSumInsured : sumInsuredHkd != null, 
                      Constants.insured.equals(currentRole), 
                      Constants.insured.equals(role), 
                      isActive(applicationStatus),
                      dateofSubmissionCal != null,
                Utils.workWithDates(new Date(),"-",2,6).before(dateofSubmissionCal),
                      $finLimitMultiplier : finLimitMultiplier != null
                  ),
                   sum($applicationRiderSumInsured.multiply($finLimitMultiplier)) // all active application rider
          )
    then
        Utils.loggingDebug("FormID: " + $formId + "|Rule_1 case ii pre-condition match");
        BigDecimal $totalSiLast6Mths = new BigDecimal($totalBasicSumInsured.toString()).add(
                new BigDecimal($totalRiderSumInsured.toString())).add(
                new BigDecimal($totalPolicySumInsured.toString())).add(
                new BigDecimal($totalPolicyRiderSumInsured.toString())).add(
                new BigDecimal($totalApplicationSumInsured.toString())).add(
                new BigDecimal($totalApplicationRiderSumInsured.toString()));
          
        Utils.loggingDebug("FormID: " + $formId + "|Total SI for non-med limit look-up (HKD): " + $totalSiLast6Mths);      
        $insured.setNonMedLifeSiHkd($totalSiLast6Mths);
        $insured.setNonMedLifeSiUsd($totalSiLast6Mths.multiply($exchangeRate));
        update($insured);
end