package com.axa.dm.autouw;

rule "Rule_29 init"
    dialect "java"
    when
        not Rule29Obj()
    then
        insert(new Rule29Obj());
end

rule "Rule_29 case 1"
    dialect "java"
    when
        ProcessObject( rule29Processed == false )
        $rule29Obj : Rule29Obj( case1 == false)

            //**************** Case 1: existing HPA/S (inforce)+ new Smart Medical Care plan (MEA1-4*, MES1-4*) ****************
            exists( 
                Policy (Constants.insured.equals(currentRole), 
                        Constants.insured.equals(role), isInforce(policyStatus) == true,
                        productType != null, isValidProduct("HPA","HPS")
                        )
                or
                PolicyRider(Constants.insured.equals(currentRole), 
                            Constants.insured.equals(role), 
                            "".equals(riderStatus.trim()),
                        productType != null, isValidProduct("HPA","HPS")
                         )
                or
                Application(Constants.insured.equals(currentRole), 
                            Constants.insured.equals(role), 
                            isActive(applicationStatus),
                            productType != null, isValidProduct("HPA","HPS")
                    )
                or
                ApplicationRider(Constants.insured.equals(currentRole), 
                                Constants.insured.equals(role), 
                                isActive(applicationStatus),
                                productType != null, isValidProduct("HPA","HPS")
                                )
            )
            exists( 
                Basic (
                        productType != null, isValidProduct("MEA","MES")
                        )
                or
                Rider(
                            productType != null, isValidProduct("MEA","MES")
                         )

            )
        
        // *******************************************************************************************************************
    then
        $rule29Obj.setCase1(true);
        update($rule29Obj);
end


rule "Rule_29 case 2"
    dialect "java"
    when
        ProcessObject( rule29Processed == false )
        $rule29Obj : Rule29Obj( case2 == false)

            //**************** Case 2: existing HPB (inforce)+  new Smart Medical Money rider (MEB*, MEH*, MEA*B* & MES*B*) ****************
            exists( 
                Policy (Constants.insured.equals(currentRole), 
                        Constants.insured.equals(role), isInforce(policyStatus) == true,
                        productType != null, isValidProduct("HPB")
                        )
                or
                PolicyRider(Constants.insured.equals(currentRole), 
                            Constants.insured.equals(role), 
                            "".equals(riderStatus.trim()),
                            productType != null, isValidProduct("HPB")
                         )
                or
                Application(Constants.insured.equals(currentRole), 
                            Constants.insured.equals(role), 
                            isActive(applicationStatus),
                            productType != null, isValidProduct("HPB")
                    )
                or
                ApplicationRider(Constants.insured.equals(currentRole), 
                                Constants.insured.equals(role), 
                                isActive(applicationStatus),
                                productType != null, isValidProduct("HPB")
                                )
            )
            exists( 
                Rider(
                            planCode matches "MEB(.*)" || planCode matches "MEH(.*)" || planCode matches "MEA(.*)B(.*)" || planCode matches "MES(.*)B(.*)"
                         )
                
            )
        
        // *******************************************************************************************************************
    then
        $rule29Obj.setCase2(true);
        update($rule29Obj);
end


rule "Rule_29 case 3"
    dialect "java"
    when
        ProcessObject( rule29Processed == false )
        $rule29Obj : Rule29Obj( case3 == false)
         //************ Current Application *****************
        $basicCount : Number( ) from accumulate ( Basic( productType in ("CT")),
                  count(1)) // current application with CT basic
        
        $riderCount : Number( ) from accumulate ( 
                 Rider( productType in ("CT")
                 ),
                 count(1) // current application with CT rider
             )
         
         //**************************************************
         
         //****************** Policy **********************
        $policyCount : Number( ) from accumulate ( 
                 Policy(  
                         Constants.insured.equals(currentRole), 
                         Constants.insured.equals(role), isInforce(policyStatus) == true,
                         productType != null , isValidProduct ("CT")
                 ),
                  count(1) // all in-force CT Basic
         ) 
                  
        $policyRider : Number( ) from accumulate ( 
                 PolicyRider( Constants.insured.equals(currentRole), Constants.insured.equals(role), "".equals(riderStatus.trim()),
                     productType != null , isValidProduct ("CT")
                 ),
                  count(1) // selected in-force CT Policy Rider
         ) 
                  
         //************************************************ 
           
         //***************** Application ********************       
         $applicationCount : Number( ) from accumulate ( 
                 Application( 
                             Constants.insured.equals(currentRole), 
                             Constants.insured.equals(role), 
                             isActive(applicationStatus),
                             productType != null , isValidProduct ("CT")
                 ),
                  count(1) // all active CT application
         )
         
          $applicationRiderCount : Number( ) from accumulate ( 
                 ApplicationRider( Constants.insured.equals(currentRole), Constants.insured.equals(role), isActive(applicationStatus),
                     productType != null , isValidProduct ("CT")
                 ),
                  count(1) // all active CT application rider
         )

         eval( $basicCount.intValue() + $riderCount.intValue() + $policyCount.intValue() + $policyRider.intValue() + $applicationCount.intValue() + $applicationRiderCount.intValue() > 1)
         //**************************************************
    then
        $rule29Obj.setCase3(true);
        update($rule29Obj);
end

rule "Rule_29 case 4"
    dialect "java"
    when
        ProcessObject( rule29Processed == false )
        $rule29Obj : Rule29Obj( case4 == false)
         //************ Current Application *****************
        $basicCount : Number( ) from accumulate ( Basic( productType != null, isValidProduct("APFR","APF#R")),
                  count(1)) // current application with CT basic
        
        $riderCount : Number( ) from accumulate ( 
                 Rider( productType != null, isValidProduct("APFR","APF#R")
                 ),
                 count(1) // current application with CT rider
             )
         
         //**************************************************
         
         //****************** Policy **********************
        $policyCount : Number( ) from accumulate ( 
                 Policy(  
                         Constants.insured.equals(currentRole), 
                         Constants.insured.equals(role), isInforce(policyStatus) == true,
                         productType != null, isValidProduct("APFR","APF#R")
                 ),
                  count(1) // all in-force CT Basic
         ) 
                  
        $policyRider : Number( ) from accumulate ( 
                 PolicyRider( Constants.insured.equals(currentRole), Constants.insured.equals(role), "".equals(riderStatus.trim()),
                     productType != null, isValidProduct("APFR","APF#R")
                 ),
                  count(1) // selected in-force CT Policy Rider
         ) 
                  
         //************************************************ 
           
         //***************** Application ********************       
         $applicationCount : Number( ) from accumulate ( 
                 Application( 
                             Constants.insured.equals(currentRole), 
                             Constants.insured.equals(role), 
                             isActive(applicationStatus),
                             productType != null, isValidProduct("APFR","APF#R")
                 ),
                  count(1) // all active CT application
         )
         
          $applicationRiderCount : Number( ) from accumulate ( 
                 ApplicationRider( Constants.insured.equals(currentRole), Constants.insured.equals(role), isActive(applicationStatus),
                     productType != null, isValidProduct("APFR","APF#R")
                 ),
                  count(1) // all active CT application rider
         )

         eval( $basicCount.intValue() + $riderCount.intValue() + $policyCount.intValue() + $policyRider.intValue() + $applicationCount.intValue() + $applicationRiderCount.intValue() > 1)
         //**************************************************
    then
        $rule29Obj.setCase4(true);
        update($rule29Obj);
end


rule "Rule-29 case 5"
    dialect "java"
    when
        ProcessObject( rule29Processed == false )
        $rule29Obj : Rule29Obj( case5 == false)
        Insured ( occupationDesc not in ("Gainfully Employed") , residencyCal in ("HONG KONG"))
         //************ Current Application *****************
        $basicCount : Number( ) from accumulate ( Basic( productType != null, isValidProduct("CAP")),
                  count(1)) // current application with "CAP" basic
        
        $riderCount : Number( ) from accumulate ( 
                 Rider( productType != null, isValidProduct("CAP")
                 ),
                 count(1) // current application with "CAP" rider
             )
         
         //**************************************************
         
         //****************** Policy **********************
        $policyCount : Number( ) from accumulate ( 
                 Policy(  
                         Constants.insured.equals(currentRole), 
                         Constants.insured.equals(role), isInforce(policyStatus) == true,
                         productType != null, isValidProduct("CAP")
                 ),
                  count(1) // all in-force "CAP" Basic
         ) 
                  
        $policyRider : Number( ) from accumulate ( 
                 PolicyRider( Constants.insured.equals(currentRole), Constants.insured.equals(role), "".equals(riderStatus.trim()),
                     productType != null, isValidProduct("CAP")
                 ),
                  count(1) // selected in-force "CAP" Policy Rider
         ) 
                  
         //************************************************ 
           
         //***************** Application ********************       
         $applicationCount : Number( ) from accumulate ( 
                 Application( 
                             Constants.insured.equals(currentRole), 
                             Constants.insured.equals(role), 
                             isActive(applicationStatus),
                             productType != null, isValidProduct("CAP")
                 ),
                  count(1) // all active "CAP" application
         )
         
          $applicationRiderCount : Number( ) from accumulate ( 
                 ApplicationRider( Constants.insured.equals(currentRole), Constants.insured.equals(role), isActive(applicationStatus),
                     productType != null, isValidProduct("CAP")
                 ),
                  count(1) // all active "CAP" application rider
         )

         eval( $basicCount.intValue() + $riderCount.intValue() + $policyCount.intValue() + $policyRider.intValue() + $applicationCount.intValue() + $applicationRiderCount.intValue() > 1)
         //**************************************************
    then
        $rule29Obj.setCase5(true);
        update($rule29Obj);
end


rule "Rule_29 conclusion"
    dialect "java"
    when
        $processObj : ProcessObject( rule29Processed == false, $policyList : policy, $applicationList : application, $policyRider : policyRider, $applicationRider : applicationRider )
        $rule29Obj : Rule29Obj ( $case1 : case1, $case2 : case2, $case3 : case3, $case4: case4, $case5 : case5 )
        eval( $case1 || $case2 || $case3 || $case4 || $case5 )   
        $resultObj : Result( $individualResultList : individualResult)
        $ruleObj : RuleObject( ruleNo == "29" )
        CurrentApplication ($formId : formId)
    then
        $processObj.setRule29Processed(true);
        IndividualResult $individualResult = new IndividualResult();
        InsuredIndividual $insuredIndividual = new InsuredIndividual();
        List failedReasons = new ArrayList<String>();
        List otherDetails = new ArrayList<OtherDetailObj>();
        java.text.DecimalFormat df = new java.text.DecimalFormat(Constants.decimalFormatString);
        int increment = 0;
        
        if ( $case1 || $case2){
            failedReasons.add("Different types of Healthpak and Smart Medical plan do not allow co-existence.");
        }
        
        if ($case3){
            failedReasons.add("Product CT is found in previous application/ policy");
        }
        
        if ($case4){
            failedReasons.add("Product Aubaine AP is found in previous application/ policy");
        }
        
        if ($case5){
            failedReasons.add("Product CAP is found in previous application/ policy");
        }
        
        OtherDetailObj prePolicy = new OtherDetailObj();
        prePolicy.setName("Previous Policy");
        prePolicy.setValue("");
        otherDetails.add(prePolicy);
        
        if ($policyList != null){
        for (int i=0;i < $policyList.size();i++){
            OtherDetailObj policy = new OtherDetailObj();
            Policy tempPolicy = (Policy) $policyList.get(i);
            increment = i+1;
            policy.setName("(" + increment + ")");
            policy.setValue(tempPolicy.getPolicyNo() + "," + tempPolicy.getProductType() + "," + tempPolicy.getCurrency() + df.format(tempPolicy.getSumInsured()));
            otherDetails.add(policy);
        }
        }
        
        OtherDetailObj preApp = new OtherDetailObj();
        preApp.setName("Previous Application");
        preApp.setValue("");
        otherDetails.add(preApp);
        
        if ($applicationList != null){
        for (int i=0;i < $applicationList.size();i++){
            OtherDetailObj app = new OtherDetailObj();
            Application tempApp = (Application) $applicationList.get(i);
            increment = i+1;
            app.setName("(" + increment + ")");
            app.setValue(tempApp.getApplicationNo() + "," + tempApp.getProductType() + "," + tempApp.getCurrency() + df.format(tempApp.getSumInsured()));
            otherDetails.add(app);
        }
        }
        
        $insuredIndividual.setDecision(Constants.failDecision);
        $insuredIndividual.setOtherDetails(otherDetails);
        $insuredIndividual.setFailedReasons(failedReasons);
        $individualResult.setRuleNo($ruleObj.getRuleNo());
        $individualResult.setDecision(Constants.failDecision);
        $individualResult.setRuleName($ruleObj.getRuleName());
        $individualResult.setMessageToClientEng($ruleObj.getMessageToClientEng());
        $individualResult.setMessageToClientChi($ruleObj.getMessageToClientChi());
        $individualResult.setInsuredIndividual($insuredIndividual);
        $individualResultList.add( $individualResult );
        update($processObj);
        long dateDiff = new Date().getTime() - $processObj.getStartTime().getTime();
        Utils.loggingTime($ruleObj.getRuleNo(),dateDiff);
        Utils.loggingDebug("Form ID: "+$formId + " | " + $individualResult.toJson());
end