package com.axa.dm.autouw;

import java.lang.Number;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;

rule "Rule_36"
  dialect "java"
  when
    $processObj : ProcessObject( rule36Processed == false, $policyList : policy, $applicationList:application, $policyRiderList : policyRider, $appRiderList : applicationRider)
    // $insured : Insured( $maxLifeSumInsured : maxLifeSumInsuredUsd != null )
    // $planConfigObject: PlanConfigObject(indexation == true, planCode in ("Term", "SMART TERM", "SMART ELITE TERM") )
    ExchangeRateObject( fromCurrency == "HKD", toCurrency == "USD", $exchangeRate : exchangeRate)
    CurrentApplication ($riderList : rider, $formId : formId)
    
    exists(Basic (productType != null,isValidProduct("Term", "SMART TERM", "SMART ELITE TERM")) or Rider (productType != null,isValidProduct("Term", "SMART TERM", "SMART ELITE TERM")))
    
   //************ Current Application *****************
   
 
      $totalBasicSumInsured : Number( ) from accumulate ( Basic( $basicSumInsured : sumInsuredHkd != null,
                 productType != null,isValidProduct("Term", "SMART TERM", "SMART ELITE TERM")
                  ),
                 sum($basicSumInsured.multiply($exchangeRate))) // current application with basic
    
    Number ($riderCount : intValue()) from accumulate (
        Rider() from $riderList,count(1)
    )
    
    Number (intValue() == $riderCount) from accumulate(
        Rider( sumInsuredHkd != null,productType != null),count(1)
    )
      $totalRiderSumInsured : (Number( ) from accumulate ( 
                Rider( $riderSumInsured : sumInsuredHkd != null,
                    productType != null,isValidProduct("Term", "SMART TERM", "SMART ELITE TERM")
                ),
                sum($riderSumInsured.multiply($exchangeRate)) // current application with rider
            )
        )
        
    //**************************************************
  //***************** Application ********************      
   
  Number ($appCount : intValue()) from accumulate (
        Application() from $applicationList,count(1)
    )
    
    Number (intValue() == $appCount) from accumulate(
        Application( sumInsuredHkd != null,productType != null),count(1)
    )
        $totalApplicationSumInsured : Number( ) from accumulate ( 
            Application( $applicationSumInsured : sumInsuredHkd != null, Constants.insured.equals(currentRole), Constants.insured.equals(role), isActive(applicationStatus)
            ,
                 productType != null,isValidProduct("Term", "SMART TERM", "SMART ELITE TERM")
            ),
             sum($applicationSumInsured.multiply($exchangeRate)) // all active application
        )
        
        Number ($appRiderCount : intValue()) from accumulate (
        ApplicationRider() from $appRiderList,count(1)
    )
    
    Number (intValue() == $appRiderCount) from accumulate(
        ApplicationRider( sumInsuredHkd != null,productType != null),count(1)
    )
         $totalApplicationRiderSumInsured : Number( ) from accumulate ( 
            ApplicationRider( $applicationRiderSumInsured : sumInsuredHkd != null,Constants.insured.equals(currentRole),Constants.insured.equals(role), isActive(applicationStatus)
              ,
                 productType != null,isValidProduct("Term", "SMART TERM", "SMART ELITE TERM")
            ),
             sum($applicationRiderSumInsured.multiply($exchangeRate)) // all active application rider
        )
      //**************************************************
      
     
        //****************** Policy **********************
        
            Number ($policyCount : intValue()) from accumulate (
        Policy() from $policyList,count(1)
    )
    
    Number (intValue() == $policyCount) from accumulate(
        Policy( sumInsuredHkd != null,productType != null),count(1)
    )
      $totalPolicySumInsured : Number( ) from accumulate ( Policy( $policySumInsured : sumInsuredHkd != null, Constants.insured.equals(currentRole), Constants.insured.equals(role), isInforce(policyStatus) == true
          ,
                 productType != null,isValidProduct("Term", "SMART TERM", "SMART ELITE TERM")),
         sum($policySumInsured.multiply($exchangeRate)) // all in-force Basic
        ) 
          
          Number ($policyRiderCount : intValue()) from accumulate (
        PolicyRider() from $policyRiderList,count(1)
    )
    
    Number (intValue() == $policyRiderCount) from accumulate(
        PolicyRider( sumInsuredHkd != null,productType != null),count(1)
    )       
      $totalPolicyRiderSumInsured : Number( ) from accumulate ( 
            PolicyRider( $policyRiderSumInsured : sumInsuredHkd != null && Constants.insured.equals(currentRole) &&  Constants.insured.equals(role) &&  "".equals(riderStatus.trim()),
                  productType != null,isValidProduct("Term", "SMART TERM", "SMART ELITE TERM")
            ),
             sum($policyRiderSumInsured.multiply($exchangeRate)) // selected in-force Policy Rider
        ) 
        //**************************************************
        
        
        eval ( 
          new BigDecimal($totalPolicySumInsured.toString()).add(
          new BigDecimal($totalPolicyRiderSumInsured.toString())).add(
          new BigDecimal($totalApplicationSumInsured.toString())).add(
          new BigDecimal($totalApplicationRiderSumInsured.toString())).add(
          new BigDecimal($totalBasicSumInsured.toString())).add(
          new BigDecimal($totalRiderSumInsured.toString())).compareTo(new BigDecimal("1500000")) == 1 
        )
        
        exists(
            Policy (indexation == true)
            or
            PolicyRider (indexation == true)
            or
            Application (indexation == true)
            or
            ApplicationRider (indexation == true)
            or
            Basic (indexation == true) 
            or
            Rider (indexation == true)
        )
        
        
        $resultObj : Result( $individualResultList : individualResult)
        $ruleObj : RuleObject( ruleNo == "36" )
  then
      $processObj.setRule36Processed( true );
      BigDecimal $totalSi = new BigDecimal($totalPolicySumInsured.toString()).add(
                      new BigDecimal($totalPolicyRiderSumInsured.toString())).add(
                      new BigDecimal($totalApplicationSumInsured.toString())).add(
                      new BigDecimal($totalApplicationRiderSumInsured.toString())).add(
                      new BigDecimal($totalBasicSumInsured.toString())).add(
                      new BigDecimal($totalRiderSumInsured.toString()));
                   
      IndividualResult $individualResult = new IndividualResult();
      InsuredIndividual $insuredIndividual = new InsuredIndividual();

      List failedReasons = new ArrayList<String>();
    
      failedReasons.add( "The SI amount of Smart Term Plan is " + $totalSi.toString() + " exceed maximum limit of USD 1,500,000." );
       
      // ******* Prepare InsuredIndividual *********
      $insuredIndividual.setFailedReasons(failedReasons);
      $insuredIndividual.setDecision(Constants.failDecision);
       
      // *******************************************
       
      $individualResult.setRuleNo($ruleObj.getRuleNo());
      $individualResult.setDecision(Constants.failDecision);
      $individualResult.setRuleName($ruleObj.getRuleName());
      $individualResult.setMessageToClientEng($ruleObj.getMessageToClientEng());
      $individualResult.setMessageToClientChi($ruleObj.getMessageToClientChi());
      $individualResult.setInsuredIndividual($insuredIndividual);

      $individualResultList.add( $individualResult );
      update($processObj);
      long dateDiff = new Date().getTime() - $processObj.getStartTime().getTime();
      Utils.loggingTime($ruleObj.getRuleNo(),dateDiff);
      Utils.loggingDebug("Form ID: "+$formId + " | " + $individualResult.toJson());
end
                 