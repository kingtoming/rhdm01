package com.axa.dm.autouw;


import java.lang.Number;
import java.util.Date;
import java.util.Arrays;


rule "Rule_28_init_object"
    dialect "java"
    when
        not (Rule28Object())
    then
       // System.out.println("Rule_28_init_object");
        Rule28Object rule28Obj = new Rule28Object();
        rule28Obj.setChangeTypeInsuredList(new ArrayList());
        rule28Obj.setChangeTypeOwnerList(new ArrayList());
        rule28Obj.setPolicyNoInsuredList(new ArrayList());
        rule28Obj.setPolicyNoOwnerList(new ArrayList());
        
        insert(rule28Obj);
    end

rule "Rule_28_Current_Insured"
    dialect "java"
    no-loop true
    when
    $processObj : ProcessObject( rule28Processed == false, $policyList: policy, $policyChangeList: policyChange)
    $rule28Obj : Rule28Object(rule28InsuredProcessed == false, $changeTypeInsuredList: changeTypeInsuredList, $policyNoInsuredList: policyNoInsuredList)
    // Product( productType in ( "WPD", "WPDD" ) , $validPlanCode : planCode != null)
    
    ( Policy ( $policyNo: policyNo, currentRole == "INS", role == "INS")
     or Policy ( $policyNo: policyNo, currentRole == "INS", role == "OWN", policyStatus in ("1","2","5","6","B","F"), productType != null, isValidProduct("WPD", "WPDD"))
    )
    
    PolicyChange( policyChangeType in ("2", "4"), policyChangeStatus in ("01", "04", "07", "25", "30"), policyNo == $policyNo)
    then
   // System.out.println("Rule_28_Current_Insured");
        for(int i=0;i<$policyChangeList.size();i++ ){
             PolicyChange p = (PolicyChange) $policyChangeList.get(i);
             if(Arrays.asList("2", "4").contains(p.getPolicyChangeType()) && Arrays.asList("01", "04", "07", "25", "30").contains(p.getPolicyChangeStatus()) && p.getPolicyNo().equals($policyNo) ){
                 $changeTypeInsuredList.add(p.getPolicyChangeType());
                 $policyNoInsuredList.add(p.getPolicyNo());
             }
        }
        $rule28Obj.setRule28InsuredProcessed(true);
        update($rule28Obj);
        // System.out.println($policyNo);
end

rule "Rule_28_Current_Owner"
    dialect "java"
    no-loop true
    when
    $processObj : ProcessObject( rule28Processed == false, $policyList: policy, $policyChangeList: policyChange)
    $rule28Obj : Rule28Object(rule28OwnerProcessed == false, $changeTypeOwnerList: changeTypeOwnerList, $policyNoOwnerList: policyNoOwnerList)
    // Product( productType in ( "WPD", "WPDD" ) , $validPlanCode : planCode != null)
    
    ( Policy ( $policyNo: policyNo, currentRole == "OWN", role == "INS")
     or Policy ( $policyNo: policyNo, currentRole == "OWN", role == "OWN", policyStatus in ("1","2","5","6","B","F"), productType != null, isValidProduct("WPD", "WPDD"))
    )
    
    PolicyChange( policyChangeType in ("2", "4"), policyChangeStatus in ("01", "04", "07", "25", "30"), policyNo == $policyNo)
    then
        for(int i=0;i<$policyChangeList.size();i++ ){
             PolicyChange p = (PolicyChange) $policyChangeList.get(i);
             if(Arrays.asList("2", "4").contains(p.getPolicyChangeType()) && Arrays.asList("01", "04", "07", "25", "30").contains(p.getPolicyChangeStatus()) && p.getPolicyNo().equals($policyNo) ){
                 $changeTypeOwnerList.add(p.getPolicyChangeType());
                 $policyNoOwnerList.add(p.getPolicyNo());
             }
        }
        $rule28Obj.setRule28OwnerProcessed(true);
        update($rule28Obj);
        // System.out.println($policyNo);
end

rule "Rule_28"
	dialect "java"
	
	when
        $processObj : ProcessObject( rule28Processed == false)
        $rule28Obj : Rule28Object( (rule28InsuredProcessed == true && $policyNoInsuredList: policyNoInsuredList && $changeTypeInsuredList: changeTypeInsuredList) || (rule28OwnerProcessed == true && $changeTypeOwnerList: changeTypeOwnerList && $policyNoOwnerList: policyNoOwnerList) )
        $resultObj : Result( $individualResultList : individualResult)
		$ruleObj : RuleObject( ruleNo == "28" )
		CurrentApplication ($formId : formId)
	then
		$processObj.setRule28Processed( true );
        //System.out.println("rule 28 final");
        
        IndividualResult $individualResult = new IndividualResult();
        
        // Insured
        if($changeTypeInsuredList.size() ==  $policyNoInsuredList.size() && $policyNoInsuredList.size() > 0){
            List failedReasons = new ArrayList<String>();
            for(int i=0;i<$changeTypeInsuredList.size();i++ ){
                String desc = "Financial Change";
                if ($changeTypeInsuredList.get(i).equals("4")){
                    desc = "Policy Reinstatement";
                }
                failedReasons.add("Pending transaction " + desc + " found in previous policy " + $policyNoInsuredList.get(i) + ".");
            }
            InsuredIndividual $insuredIndividual = new InsuredIndividual();
            $insuredIndividual.setFailedReasons(failedReasons);
            $insuredIndividual.setDecision("Fail");
            $individualResult.setInsuredIndividual($insuredIndividual);
        }
        
        // Owner
        if($changeTypeOwnerList.size() ==  $policyNoOwnerList.size() && $policyNoOwnerList.size() > 0){
            List failedReasons = new ArrayList<String>();
            for(int i=0;i<$changeTypeOwnerList.size();i++ ){
                String desc = "Financial Change";
                if ($changeTypeOwnerList.get(i).equals("4")){
                    desc = "Policy Reinstatement";
                }
                failedReasons.add("Pending transaction " + desc + " found in previous policy " + $policyNoOwnerList.get(i) + ".");
            }
            OwnerIndividual $ownerIndividual = new OwnerIndividual();
            $ownerIndividual.setFailedReasons(failedReasons);
            $ownerIndividual.setDecision("Fail");
            $individualResult.setOwnerIndividual($ownerIndividual);
        }
    
        $individualResult.setRuleNo($ruleObj.getRuleNo());
        $individualResult.setDecision("Fail");
        $individualResult.setRuleName($ruleObj.getRuleName());
        $individualResult.setMessageToClientEng($ruleObj.getMessageToClientEng());
        $individualResult.setMessageToClientChi($ruleObj.getMessageToClientChi());
        $individualResultList.add( $individualResult );
        update($processObj);
        long dateDiff = new Date().getTime() - $processObj.getStartTime().getTime();
        Utils.loggingTime($ruleObj.getRuleNo(),dateDiff);
        Utils.loggingDebug("Form ID: "+$formId + " | " + $individualResult.toJson());
end