package com.axa.dm.autouw;

rule "Rule 10 - Compare Annual Income VS Annual Regular Premium"    
    dialect "java"
    when
        CurrentApplication ($formId : formId)
        $processObj : ProcessObject (rule10Processed == false)
        // ExchangeRateObject(toCurrency == "USD", fromCurrency == "HKD", $exchangeRate : exchangeRate)
        $ruleObj : RuleObject( ruleNo == "10")
        Result ($individualResultList : individualResult)
        Payor($annualIncome:annualIncome != null, occupationClass not in ("4","6","7"), $role : role != null, $annualDisposableIncome : annualDisposableIncome != null, $premiumToIncomeRatio : premiumToIncomeRatio != null)
        $applicationAnnualRegularPremium : Number( ) from accumulate ( Application( $annualRegularPremium : annualRegularPremiumHkd != null),
                             sum($annualRegularPremium)) 
        $policyAnnualRegularPremium : Number( ) from accumulate ( Policy( $annualRegularPremium : annualRegularPremiumHkd != null),
                             sum($annualRegularPremium)) 
        $basicAnnualRegularPremium : Number( ) from accumulate ( Basic( $annualRegularPremium : annualRegularPremium != null),
                             sum($annualRegularPremium))
            eval(
                $annualDisposableIncome.compareTo(BigDecimal.ZERO) == -1 || 
                $annualDisposableIncome.compareTo(BigDecimal.ZERO) == 0 ||
                $annualIncome.compareTo(BigDecimal.ZERO) == 0 ||
                new BigDecimal($applicationAnnualRegularPremium.toString()).add(new BigDecimal($policyAnnualRegularPremium.toString())).add(new BigDecimal($basicAnnualRegularPremium.toString())).divide($annualIncome,8,RoundingMode.HALF_UP).compareTo($premiumToIncomeRatio) == 1 ||
                new BigDecimal($applicationAnnualRegularPremium.toString()).add(new BigDecimal($policyAnnualRegularPremium.toString())).add(new BigDecimal($basicAnnualRegularPremium.toString())).divide($annualDisposableIncome,8,RoundingMode.HALF_UP).compareTo(new BigDecimal("0.8")) == 1
            )
    then
        $processObj.setRule10Processed( true );
        IndividualResult $individualResult = new IndividualResult();
        List failedReasons = new ArrayList<String>();
        InsuredIndividual insuredIndividual = null;
        OwnerIndividual ownerIndividual = null;
        
        // System.out.println($applicationAnnualRegularPremium);
        // System.out.println($policyAnnualRegularPremium);
        // System.out.println($basicAnnualRegularPremium);
        
        failedReasons.add("Total Annual Regular Premium exceeds limit ");
        
        if(Constants.ownerPayorId.equals($role)){
                ownerIndividual = new OwnerIndividual();
                ownerIndividual.setDecision(Constants.failDecision);
                ownerIndividual.setFailedReasons(failedReasons);
                $individualResult.setOwnerIndividual(ownerIndividual);
        }
        
        if(Constants.insuredPayorId.equals($role)){
                insuredIndividual = new InsuredIndividual();
                insuredIndividual.setDecision(Constants.failDecision);
                insuredIndividual.setFailedReasons(failedReasons);
                $individualResult.setInsuredIndividual(insuredIndividual);
        }
        
        $individualResult.setRuleNo($ruleObj.getRuleNo());
        $individualResult.setDecision(Constants.failDecision);
        $individualResult.setRuleName($ruleObj.getRuleName());
        $individualResult.setMessageToClientEng($ruleObj.getMessageToClientEng());
        $individualResult.setMessageToClientChi($ruleObj.getMessageToClientChi());
        
        $individualResultList.add( $individualResult );
        update($processObj);
        long dateDiff = new Date().getTime() - $processObj.getStartTime().getTime();
        Utils.loggingTime($ruleObj.getRuleNo(),dateDiff);
        Utils.loggingDebug("Form ID: "+$formId + " | " + $individualResult.toJson());
    end
    
    