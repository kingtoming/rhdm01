package com.axa.dm.autouw;

import java.lang.Number;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;

rule "Rule_13"
          dialect "java"
          when
                   $processObj : ProcessObject( rule13Processed == false, $policyList : policy,$applicationList : application, $policyRiderList : policyRider, $applicationRiderList : applicationRider )
                   $insured : Insured( $termBasicMaxSiUsd : termBasicMaxSiUsd != null, $termRiderMaxSiUsd : termRiderMaxSiUsd != null)
                   ExchangeRateObject( fromCurrency == "HKD", toCurrency == "USD", $exchangeRate : exchangeRate)
                   CurrentApplication($riderList : rider, $formId : formId)
                   
                   exists( Basic( productType != null, isValidProduct("Term") ) or Rider( productType != null,isValidProduct("Term") ) )
                    //************ Current Application *****************
                   $totalBasicSumInsured : Number( ) from accumulate ( Basic( $basicSumInsured : sumInsuredHkd != null,productType != null,isValidProduct("Term")),
                             sum($basicSumInsured.multiply($exchangeRate))) // current application with Term basic
                
                    Number ($riderCount : intValue()) from accumulate (
                        Rider () from $riderList, count(1)
                    )
                    Number (intValue() == $riderCount) from accumulate(
                        Rider(sumInsuredHkd != null,productType != null), count(1)
                    )
                    
                   $totalRiderSumInsured : (Number( ) from accumulate ( 
                            Rider( $riderSumInsured : sumInsuredHkd != null,
                               productType != null, isValidProduct("Term")
                            ),
                            sum($riderSumInsured.multiply($exchangeRate)) // current application with Term rider
                        )
                    )
                    
                    //**************************************************
                    
                    //****************** Policy **********************
                    
                    Number($policyCount : intValue()) from accumulate(
                        Policy() from $policyList, count(1)
                    )
                    
                    Number (intValue() == $policyCount) from accumulate(
                        Policy (sumInsuredHkd != null,productType != null), count(1)
                    )
                   $totalPolicySumInsured : Number( ) from accumulate ( 
                            Policy( $policySumInsured : sumInsuredHkd != null, 
                                    Constants.insured.equals(currentRole), 
                                    Constants.insured.equals(role), isInforce(policyStatus) == true,
                                    productType != null,isValidProduct("Term")
                            ),
                             sum($policySumInsured.multiply($exchangeRate)) // all in-force Term Basic
                    ) 
                      
                      Number($policyRiderCount : intValue()) from accumulate(
                        PolicyRider() from $policyRiderList, count(1)
                    )
                    
                    Number (intValue() == $policyRiderCount) from accumulate(
                        PolicyRider (sumInsuredHkd != null, productType != null), count(1)
                    )       
                   $totalPolicyRiderSumInsured : Number( ) from accumulate ( 
                            PolicyRider( $policyRiderSumInsured : sumInsuredHkd != null, Constants.insured.equals(currentRole), Constants.insured.equals(role), "".equals(riderStatus.trim()),
                                productType != null,isValidProduct("Term")
                            ),
                             sum($policyRiderSumInsured.multiply($exchangeRate)) // selected in-force Term Policy Rider
                    ) 
                             
                    //************************************************ 
                      
                    //***************** Application ******************** 
                    
                     Number($appCount : intValue()) from accumulate(
                        Application() from $applicationList, count(1)
                    )
                    
                    Number (intValue() == $appCount) from accumulate(
                        Application (sumInsuredHkd != null, productType != null), count(1)
                    )  
                    $totalApplicationSumInsured : Number( ) from accumulate ( 
                            Application( $applicationSumInsured : sumInsuredHkd != null, 
                                        Constants.insured.equals(currentRole), 
                                        Constants.insured.equals(role), 
                                        isActive(applicationStatus),
                                        productType != null,
                                        isValidProduct("Term")
                            ),
                             sum($applicationSumInsured.multiply($exchangeRate)) // all active Term application
                    )
                    
                    Number($appRiderCount : intValue()) from accumulate(
                        ApplicationRider() from $applicationRiderList, count(1)
                    )
                    
                    Number (intValue() == $appRiderCount) from accumulate(
                        ApplicationRider (sumInsuredHkd != null, productType != null), count(1)
                    )  
                     $totalApplicationRiderSumInsured : Number( ) from accumulate ( 
                            ApplicationRider( $applicationRiderSumInsured : sumInsuredHkd != null, Constants.insured.equals(currentRole), Constants.insured.equals(role),isActive(applicationStatus),
                                productType != null,isValidProduct("Term") 
                            ),
                             sum($applicationRiderSumInsured.multiply($exchangeRate)) // all active Term application rider
                    )

                    
                    //**************************************************
                    
                  eval ( 
                      new BigDecimal($totalPolicySumInsured.toString()).add(
                      new BigDecimal($totalApplicationSumInsured.toString())).add(
                      new BigDecimal($totalBasicSumInsured.toString())).compareTo($termBasicMaxSiUsd) == 1
                      ||
                      new BigDecimal($totalPolicyRiderSumInsured.toString()).add(
                      new BigDecimal($totalApplicationRiderSumInsured.toString())).add(
                      new BigDecimal($totalRiderSumInsured.toString())).compareTo($termRiderMaxSiUsd) == 1
                    )
                    
                    
                   $resultObj : Result( $individualResultList : individualResult)
                   $ruleObj : RuleObject( ruleNo == "13" )
          then
                   $processObj.setRule13Processed( true );
                  IndividualResult $individualResult = new IndividualResult();
                  InsuredIndividual $insuredIndividual = new InsuredIndividual();
                //   OwnerIndividual $ownerIndividual = new OwnerIndividual();
                  java.text.DecimalFormat df = new java.text.DecimalFormat(Constants.decimalFormatString);
                  List failedReasons = new ArrayList<String>();
                  List otherDetails = new ArrayList<OtherDetailObj>();
                  List termList = new ArrayList<String>();
                  termList.add("Term");
                  BigDecimal totalTermBasic = new BigDecimal($totalPolicySumInsured.toString()).add(
                       new BigDecimal($totalApplicationSumInsured.toString())).add(
                       new BigDecimal($totalBasicSumInsured.toString()));
                       
                       
                  BigDecimal totalTermRider = new BigDecimal($totalPolicyRiderSumInsured.toString()).add(
                      new BigDecimal($totalApplicationRiderSumInsured.toString())).add(
                      new BigDecimal($totalRiderSumInsured.toString()));
                      
                  int increment = 0;
                   
                  OtherDetailObj occupation = new OtherDetailObj();
                  occupation.setName("Occupation");
                  occupation.setValue($insured.getOccupationDesc());
                  otherDetails.add(occupation);
                   
                  OtherDetailObj occupationClass = new OtherDetailObj();
                  occupationClass.setName("Occupation Class");
                  occupationClass.setValue($insured.getOccupationClass());
                  otherDetails.add(occupationClass);
                   
                  OtherDetailObj resident = new OtherDetailObj();
                  resident.setName("Resident");
                  resident.setValue($insured.getCountryofResidency());
                  otherDetails.add(resident);
                  
                  
                  //********************************** output Term Basic ****************************************
                  
                  OtherDetailObj basicDetails = new OtherDetailObj();
                  basicDetails.setName("Details of previous policy/ application with Term basic");
                  basicDetails.setValue("");
                  otherDetails.add(basicDetails);
                   
                  OtherDetailObj totalSiObj = new OtherDetailObj();
                  totalSiObj.setName("Total SI");
                  totalSiObj.setValue(df.format(totalTermBasic));
                  otherDetails.add(totalSiObj);
                  
                   
                  OtherDetailObj prevPolicy = new OtherDetailObj();
                  prevPolicy.setName("Previous Policy");
                  prevPolicy.setValue("");
                  otherDetails.add(prevPolicy);
                  
                  
                  increment = 0;
                  
                  if ($policyList != null){
                   for (int i=0;i < $policyList.size();i++){
                       OtherDetailObj policy = new OtherDetailObj();
                       Policy tempPolicy = (Policy) $policyList.get(i);
                       if (tempPolicy.getProductType() != null && tempPolicy.isValidProduct("Term")
                        && Constants.insured.equals(tempPolicy.getCurrentRole()) 
                        && Constants.insured.equals(tempPolicy.getRole())
                        && tempPolicy.isInforce(tempPolicy.getPolicyStatus())
                       ){
                            increment++;
                            policy.setName("(" + increment + ")");
                            policy.setValue(tempPolicy.getPolicyNo() + ";" + tempPolicy.getProductType() + ";" + tempPolicy.getCurrency() + df.format(tempPolicy.getSumInsured()));
                            otherDetails.add(policy);
                       }
                        
                   }
                  }
                
                   
                   OtherDetailObj preApp = new OtherDetailObj();
                   preApp.setName("Previous Application");
                   preApp.setValue("");
                   otherDetails.add(preApp);
                   
                   increment = 0;
                   
                   if ($applicationList != null){
                   for (int i=0;i < $applicationList.size();i++){
                       OtherDetailObj app = new OtherDetailObj();
                       Application tempApp = (Application) $applicationList.get(i);
                       if (tempApp.getProductType() != null && tempApp.isValidProduct("Term") &&
                        Constants.insured.equals(tempApp.getCurrentRole()) 
                        && Constants.insured.equals(tempApp.getRole())
                        && tempApp.isActive(tempApp.getApplicationStatus())
                       ){
                            increment++;
                            app.setName("(" + increment + ")");
                            app.setValue(tempApp.getApplicationNo() + ";" + tempApp.getProductType() + ";" + tempApp.getCurrency() + df.format(tempApp.getSumInsured()));
                            otherDetails.add(app);
                       }
                        
                   }
                   }
                   
                   
                   //************************************************************************************************
                   
                   //********************************** output Term Rider ****************************************
                    
                  OtherDetailObj riderDetails = new OtherDetailObj();
                  riderDetails.setName("Details of previous policy/ application with Term rider");
                  riderDetails.setValue("");
                  otherDetails.add(riderDetails);
                   
                  OtherDetailObj totalSiRiderObj = new OtherDetailObj();
                  totalSiRiderObj.setName("Total SI");
                  totalSiRiderObj.setValue(df.format(totalTermRider));
                  otherDetails.add(totalSiRiderObj);
                  
                   
                  OtherDetailObj prevRiderPolicy = new OtherDetailObj();
                  prevRiderPolicy.setName("Previous Policy");
                  prevRiderPolicy.setValue("");
                  otherDetails.add(prevRiderPolicy);
                  
                  
                  increment = 0;
                  
                  if ($policyRiderList != null){
                   for (int i=0;i < $policyRiderList.size();i++){
                       OtherDetailObj policyRider = new OtherDetailObj();
                       PolicyRider tempPolicyRider = (PolicyRider) $policyRiderList.get(i);
                       if (tempPolicyRider.getProductType() != null && tempPolicyRider.isValidProduct("Term") 
                        && Constants.insured.equals(tempPolicyRider.getCurrentRole()) 
                        && Constants.insured.equals(tempPolicyRider.getRole())
                        && "".equals(tempPolicyRider.getRiderStatus())
                       ){
                            increment++;
                            policyRider.setName("(" + increment + ")");
                            policyRider.setValue(tempPolicyRider.getPolicyNo() + ";" + tempPolicyRider.getProductSeriesConcat() + ";" + tempPolicyRider.getCurrency() + df.format(tempPolicyRider.getSumInsured()));
                            otherDetails.add(policyRider);
                       }
                        
                   }
                  }
                   
                   OtherDetailObj preAppRider = new OtherDetailObj();
                   preAppRider.setName("Previous Application");
                   preAppRider.setValue("");
                   otherDetails.add(preAppRider);
                   
                   increment = 0;
                   
                   if ($applicationRiderList != null){
                   for (int i=0;i < $applicationRiderList.size();i++){
                       OtherDetailObj appRider = new OtherDetailObj();
                       ApplicationRider tempAppRider = (ApplicationRider) $applicationRiderList.get(i);
                       if (tempAppRider.getProductType() != null && tempAppRider.isValidProduct("Term")
                        && Constants.insured.equals(tempAppRider.getCurrentRole()) 
                        && Constants.insured.equals(tempAppRider.getRole())
                        && tempAppRider.isActive(tempAppRider.getApplicationStatus())
                       ){
                            increment++;
                            appRider.setName("(" + increment + ")");
                            appRider.setValue(tempAppRider.getApplicationNo() + ";" + tempAppRider.getProductSeriesConcat() + ";" + tempAppRider.getCurrency() + df.format(tempAppRider.getSumInsured()));
                            otherDetails.add(appRider);
                       }
                        
                   }
                   }
                   
                   //************************************************************************************************
                   
                    if (totalTermBasic.compareTo($termBasicMaxSiUsd) == 1)
                        failedReasons.add( "Total Term Basic SI exceeds maximum limit " + df.format($termBasicMaxSiUsd) );
                    
                    if (totalTermRider.compareTo($termRiderMaxSiUsd) == 1)
                        failedReasons.add( "Total Term Rider SI exceeds maximum limit " + df.format($termRiderMaxSiUsd)  );
                   
                  // ******* Prepare InsuredIndividual *********
                  $insuredIndividual.setFailedReasons(failedReasons);
                  $insuredIndividual.setDecision(Constants.failDecision);
                  $insuredIndividual.setOtherDetails(otherDetails);
                   
                  // *******************************************
                //   $ownerIndividual.setDecision(Constants.failDecision);
                   
                  $individualResult.setRuleNo($ruleObj.getRuleNo());
                  $individualResult.setDecision(Constants.failDecision);
                  $individualResult.setRuleName($ruleObj.getRuleName());
                  $individualResult.setMessageToClientEng($ruleObj.getMessageToClientEng());
                  $individualResult.setMessageToClientChi($ruleObj.getMessageToClientChi());
                  $individualResult.setInsuredIndividual($insuredIndividual);
                //   $individualResult.setOwnerIndividual($ownerIndividual);
                  $individualResultList.add( $individualResult );
                  update($processObj);
                   long dateDiff = new Date().getTime() - $processObj.getStartTime().getTime();
                   Utils.loggingTime($ruleObj.getRuleNo(),dateDiff);
                   Utils.loggingDebug("Form ID: "+$formId + " | " + $individualResult.toJson());
end
