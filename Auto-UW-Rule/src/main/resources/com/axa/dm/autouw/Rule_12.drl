package com.axa.dm.autouw;

import java.lang.Number;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;

rule "Rule_12"
          dialect "java"
          when
                   $processObj : ProcessObject( rule12Processed == false, $policyList : policy, $applicationList:application, $policyRiderList : policyRider, $applicationRiderList : applicationRider)
                   $insured : Insured( $maxLifeSumInsured : maxLifeSumInsuredUsd != null )
                   ExchangeRateObject( fromCurrency == "HKD", toCurrency == "USD", $exchangeRate : exchangeRate)
                   CurrentApplication ($formId : formId, $riderList : rider)
                   exists( 
                       Basic( 
                           productType != null , isValidProduct (
                                            "AIO","SPTB","SJVC","SSVC","HA","HB","MAX",
                                            "Term","PRECIOUS","Pulsar II","FORTUNEGUARD","FORTUNEPROTECTOR",
                                            "SIG02","WA","FGS II","AP","ECARE","LIP","SLI","ELI","SMR",
                                            "CRA","CRB","CAP","PRECIOUS MOM AND CHILD"
                                            ) 
                        ) 
                        or 
                        Rider( 
                            productType != null , isValidProduct (
                                           "AIO","SPTB","SJVC","SSVC","HA","HB","MAX",
                                            "Term","PRECIOUS","Pulsar II","FORTUNEGUARD","FORTUNEPROTECTOR",
                                            "SIG02","WA","FGS II","AP","ECARE","LIP","SLI","ELI","SMR",
                                            "CRA","CRB","CAP","PRECIOUS MOM AND CHILD",
                                            "MB","ES"
                            ) 
                        )
                    )
                    
                    //************ Current Application *****************
                  $totalBasicSumInsured : Number( ) from accumulate ( 
                        Basic( $basicSumInsured : sumInsuredHkd != null,productType != null , 
                        !isValidProduct("MB")
                        ),
                             sum($basicSumInsured.multiply($exchangeRate))) // current application with basic
                             
                    $totalMbBasicSumInsured : Number( ) from accumulate ( 
                        Basic( $basicSumInsured : sumInsuredHkd != null,productType != null , 
                        isValidProduct("MB")
                        ),
                             sum($basicSumInsured.multiply($exchangeRate).multiply(new BigDecimal("0.5")))) // current application with MB basic
                
                Number($riderCount : intValue()) from accumulate(
                    Rider() from $riderList, count(1)
                )
                
                Number (intValue() == $riderCount) from accumulate(
                    Rider( sumInsuredHkd != null,productType != null), count(1)
                )
                
                  $totalRiderSumInsured : (Number( ) from accumulate ( 
                            Rider( $riderSumInsured : sumInsuredHkd != null,productType != null , 
                            !isValidProduct("MB")
                            // ,productType in ("Term","ELI","SMR","SKI","CI","HMI","HA","HB","AIO","ESrider","PC")
                            ),
                            sum($riderSumInsured.multiply($exchangeRate)) // current application with rider
                        )
                    )
                    
                    $totalMbRiderSumInsured : (Number( ) from accumulate ( 
                            Rider( $riderSumInsured : sumInsuredHkd != null,productType != null , 
                                isValidProduct("MB")
                            ),
                            sum($riderSumInsured.multiply($exchangeRate).multiply(new BigDecimal("0.5"))) // current application with MB rider (50% of amount)
                        )
                    )
                    //**************************************************
                    
                    //****************** Policy **********************
                    
                Number($policyCount : intValue()) from accumulate(
                    Policy() from $policyList, count(1)
                )
                
                Number (intValue() == $policyCount) from accumulate(
                    Policy( sumInsuredHkd != null,productType != null), count(1)
                )
                
                  $totalPolicySumInsured : Number( ) from accumulate ( 
                            Policy( 
                                $policySumInsured : sumInsuredHkd != null, productType != null , 
                                Constants.insured.equals(currentRole), Constants.insured.equals(role), 
                                isInforce(policyStatus) == true
                                ,!isValidProduct("MB")
                            ),
                             sum($policySumInsured.multiply($exchangeRate)) // all in-force Basic
                    ) 
                    
                $totalMbPolicySumInsured : Number( ) from accumulate ( 
                            Policy( 
                                $policySumInsured : sumInsuredHkd != null, productType != null , 
                                Constants.insured.equals(currentRole), Constants.insured.equals(role), 
                                isInforce(policyStatus) == true
                                ,isValidProduct("MB")
                            ),
                             sum($policySumInsured.multiply($exchangeRate).multiply(new BigDecimal("0.5"))) // all in-force Basic
                    ) 
                    
                Number($policyRiderCount : intValue()) from accumulate(
                    PolicyRider() from $policyRiderList, count(1)
                )
                
                Number (intValue() == $policyRiderCount) from accumulate(
                    PolicyRider( sumInsuredHkd != null,productType != null), count(1)
                )
                             
                  $totalPolicyRiderSumInsured : Number( ) from accumulate ( 
                            PolicyRider( $policyRiderSumInsured : sumInsuredHkd != null, Constants.insured.equals(currentRole), Constants.insured.equals(role), "".equals(riderStatus.trim())
                                ,productType != null , !isValidProduct("MB")
                            ),
                             sum($policyRiderSumInsured.multiply($exchangeRate)) // selected in-force Policy Rider
                    ) 
                             
                    $totalMbPolicyRiderSumInsured : Number( ) from accumulate ( 
                            PolicyRider( 
                                $policyRiderSumInsured : sumInsuredHkd != null, productType != null , 
                                Constants.insured.equals(currentRole), Constants.insured.equals(role), 
                                "".equals(riderStatus.trim()),
                                isValidProduct("MB")
                            ),
                             sum($policyRiderSumInsured.multiply($exchangeRate).multiply(new BigDecimal("0.5"))) // selected in-force MB Policy Rider
                    ) 
                    //************************************************ 
                      
                    //***************** Application ******************** 
                    
                    Number($appCount : intValue()) from accumulate(
                    Application() from $applicationList, count(1)
                )
                
                Number (intValue() == $appCount) from accumulate(
                    Application( sumInsuredHkd != null,productType != null), count(1)
                )
                
                    $totalApplicationSumInsured : Number( ) from accumulate ( 
                            Application( 
                                $applicationSumInsured : sumInsuredHkd != null, 
                                Constants.insured.equals(currentRole), Constants.insured.equals(role), 
                                isActive(applicationStatus),productType != null
                                ,!isValidProduct("MB")
                            ),
                             sum($applicationSumInsured.multiply($exchangeRate)) // all active application
                    )
                    
                    $totalMbApplicationSumInsured : Number( ) from accumulate ( 
                            Application( 
                                $applicationSumInsured : sumInsuredHkd != null, 
                                Constants.insured.equals(currentRole), Constants.insured.equals(role), 
                                isActive(applicationStatus),productType != null
                                ,isValidProduct("MB")
                            ),
                             sum($applicationSumInsured.multiply($exchangeRate).multiply(new BigDecimal("0.5"))) // all active application
                    )
                    
                Number($appRiderCount : intValue()) from accumulate(
                    ApplicationRider() from $applicationRiderList, count(1)
                )
                
                Number (intValue() == $appRiderCount) from accumulate(
                    ApplicationRider( sumInsuredHkd != null,productType != null), count(1)
                )
                    
                     $totalApplicationRiderSumInsured : Number( ) from accumulate ( 
                            ApplicationRider( $applicationRiderSumInsured : sumInsuredHkd != null, Constants.insured.equals(currentRole), Constants.insured.equals(role), isActive(applicationStatus),
                                productType != null, !isValidProduct("MB")
                            ),
                             sum($applicationRiderSumInsured.multiply($exchangeRate)) // all active application rider
                    )
                    
                     $totalApplicationMbRiderSumInsured : Number( ) from accumulate ( 
                            ApplicationRider( $applicationRiderSumInsured : sumInsuredHkd != null, Constants.insured.equals(currentRole), Constants.insured.equals(role), isActive(applicationStatus),
                                productType != null, isValidProduct("MB")
                            ),
                             sum($applicationRiderSumInsured.multiply($exchangeRate).multiply(new BigDecimal("0.5"))) // all active application MB rider
                    )
                    
                    //**************************************************
                    
                  eval ( 
                      new BigDecimal($totalPolicySumInsured.toString()).add(
                      new BigDecimal($totalMbPolicySumInsured.toString())).add(  
                      new BigDecimal($totalPolicyRiderSumInsured.toString())).add(
                      new BigDecimal($totalMbPolicyRiderSumInsured.toString())).add(
                      new BigDecimal($totalApplicationSumInsured.toString())).add(
                      new BigDecimal($totalMbApplicationSumInsured.toString())).add(
                      new BigDecimal($totalApplicationRiderSumInsured.toString())).add(
                      new BigDecimal($totalApplicationMbRiderSumInsured.toString())).add(
                      new BigDecimal($totalBasicSumInsured.toString())).add(
                      new BigDecimal($totalMbBasicSumInsured.toString())).add(
                      new BigDecimal($totalRiderSumInsured.toString())).add(
                      new BigDecimal($totalMbRiderSumInsured.toString())).compareTo($maxLifeSumInsured) == 1 
                    )

                   $resultObj : Result( $individualResultList : individualResult)
                   $ruleObj : RuleObject( ruleNo == "12" )
          then
                   $processObj.setRule12Processed( true );
                   BigDecimal $totalSi = new BigDecimal($totalPolicySumInsured.toString()).add(
                      new BigDecimal($totalPolicyRiderSumInsured.toString())).add(
                      new BigDecimal($totalMbPolicyRiderSumInsured.toString())).add(
                      new BigDecimal($totalApplicationSumInsured.toString())).add(
                      new BigDecimal($totalApplicationRiderSumInsured.toString())).add(
                      new BigDecimal($totalApplicationMbRiderSumInsured.toString())).add(
                      new BigDecimal($totalBasicSumInsured.toString())).add(
                      new BigDecimal($totalRiderSumInsured.toString())).add(
                      new BigDecimal($totalMbRiderSumInsured.toString()));
                   
                  IndividualResult $individualResult = new IndividualResult();
                  InsuredIndividual $insuredIndividual = new InsuredIndividual();

                  java.text.DecimalFormat df = new java.text.DecimalFormat(Constants.decimalFormatString);
                  List failedReasons = new ArrayList<String>();
                  List otherDetails = new ArrayList<OtherDetailObj>();
                  int increment = 0;
                   
                  OtherDetailObj occupation = new OtherDetailObj();
                  occupation.setName("Occupation");
                  occupation.setValue($insured.getOccupationDesc());
                  otherDetails.add(occupation);
                   
                  OtherDetailObj occupationClass = new OtherDetailObj();
                  occupationClass.setName("Occupation Class");
                  occupationClass.setValue($insured.getOccupationClass());
                  otherDetails.add(occupationClass);
                   
                  OtherDetailObj resident = new OtherDetailObj();
                  resident.setName("Resident");
                  resident.setValue($insured.getCountryofResidency());
                  otherDetails.add(resident);
                   
                  OtherDetailObj totalSiObj = new OtherDetailObj();
                  totalSiObj.setName("Total SI");
                  totalSiObj.setValue("USD" + df.format($totalSi));
                  otherDetails.add(totalSiObj);
                   
                  OtherDetailObj prePolicy = new OtherDetailObj();
                  prePolicy.setName("Previous Policy");
                  prePolicy.setValue("");
                  otherDetails.add(prePolicy);
                   
                  increment = 0;
                  
                  if ($policyList != null){
                  for (int i=0;i < $policyList.size();i++){
                      OtherDetailObj policy = new OtherDetailObj();
                      Policy tempPolicy = (Policy) $policyList.get(i);
                      if (
                        Constants.insured.equals(tempPolicy.getCurrentRole()) 
                        && Constants.insured.equals(tempPolicy.getRole())
                        && tempPolicy.isInforce(tempPolicy.getPolicyStatus())
                        ){
                        increment++;
                        policy.setName("(" + increment + ")");
                        policy.setValue(tempPolicy.getPolicyNo() + ";" + tempPolicy.getProductSeriesConcat() + ";" + tempPolicy.getCurrency() + df.format(tempPolicy.getSumInsured()));
                        otherDetails.add(policy);
                      }
                  }
                  }
                  
                  if ($policyRiderList != null){
                  for (int i=0;i < $policyRiderList.size();i++){
                      OtherDetailObj policyRider = new OtherDetailObj();
                      PolicyRider tempPolicyRider = (PolicyRider) $policyRiderList.get(i);
                      if (
                        Constants.insured.equals(tempPolicyRider.getCurrentRole()) 
                        && Constants.insured.equals(tempPolicyRider.getRole())
                        && "".equals(tempPolicyRider.getRiderStatus())
                        ){
                        increment++;
                        policyRider.setName("(" + increment + ")");
                        policyRider.setValue(tempPolicyRider.getPolicyNo() + ";" + tempPolicyRider.getProductSeriesConcat() + ";" + tempPolicyRider.getCurrency() + df.format(tempPolicyRider.getSumInsured()));
                        otherDetails.add(policyRider);
                      }
                  }
                  }
                   
                  OtherDetailObj preApp = new OtherDetailObj();
                  preApp.setName("Previous Application");
                  preApp.setValue("");
                  otherDetails.add(preApp);
                   
                  increment = 0;
                  
                  if ($applicationList != null){
                  for (int i=0;i < $applicationList.size();i++){
                      OtherDetailObj app = new OtherDetailObj();
                      Application tempApp = (Application) $applicationList.get(i);
                      if (
                        Constants.insured.equals(tempApp.getCurrentRole()) 
                        && Constants.insured.equals(tempApp.getRole())
                        && tempApp.isActive(tempApp.getApplicationStatus())
                      ){
                        increment++;
                        app.setName("(" + increment + ")");
                        app.setValue(tempApp.getApplicationNo() + ";" + tempApp.getProductSeriesConcat() + ";" + tempApp.getCurrency() + df.format(tempApp.getSumInsured()));
                        otherDetails.add(app);
                      }
                  }
                  }
                  
                  if ($applicationRiderList != null){
                  for (int i=0;i < $applicationRiderList.size();i++){
                      OtherDetailObj appRider = new OtherDetailObj();
                      ApplicationRider tempAppRider = (ApplicationRider) $applicationRiderList.get(i);
                      if (
                        Constants.insured.equals(tempAppRider.getCurrentRole()) 
                        && Constants.insured.equals(tempAppRider.getRole())
                        && tempAppRider.isActive(tempAppRider.getApplicationStatus())
                      ){
                        increment++;
                        appRider.setName("(" + increment + ")");
                        appRider.setValue(tempAppRider.getApplicationNo() + ";" + tempAppRider.getProductSeriesConcat() + ";" + tempAppRider.getCurrency() + df.format(tempAppRider.getSumInsured()));
                        otherDetails.add(appRider);
                      }
                  }
                  }
                   
                  failedReasons.add( "Total Sum Insured exceeds non-medical limit " + df.format($maxLifeSumInsured) );
                   
                  // ******* Prepare InsuredIndividual *********
                  $insuredIndividual.setFailedReasons(failedReasons);
                  $insuredIndividual.setDecision(Constants.failDecision);
                  $insuredIndividual.setOtherDetails(otherDetails);
                   
                  // *******************************************
                   
                  $individualResult.setRuleNo($ruleObj.getRuleNo());
                  $individualResult.setDecision(Constants.failDecision);
                  $individualResult.setRuleName($ruleObj.getRuleName());
                  $individualResult.setMessageToClientEng($ruleObj.getMessageToClientEng());
                  $individualResult.setMessageToClientChi($ruleObj.getMessageToClientChi());
                  $individualResult.setInsuredIndividual($insuredIndividual);

                  $individualResultList.add( $individualResult );
                  update($processObj);
                  long dateDiff = new Date().getTime() - $processObj.getStartTime().getTime();
                   Utils.loggingTime($ruleObj.getRuleNo(),dateDiff);
                   Utils.loggingDebug("Form ID: "+$formId + " | " + $individualResult.toJson());
end
