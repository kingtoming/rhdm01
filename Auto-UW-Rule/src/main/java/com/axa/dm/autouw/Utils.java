package com.axa.dm.autouw;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.Calendar;
import java.util.Date;
import java.util.Properties;
import java.io.FileInputStream;
import java.io.IOException;
import org.apache.log4j.PropertyConfigurator;
import java.util.GregorianCalendar;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class Utils implements java.io.Serializable {

    static final long serialVersionUID = 1L;
    private static Properties p;
    
    private static void redirectLog(){
        if (p == null){
            p = new Properties();
            Logger logger = LoggerFactory.getLogger(Utils.class);
            String jbossHome = System.getenv("JBOSS_HOME");
            jbossHome = (jbossHome != null && "/".equals(jbossHome.substring(jbossHome.length() - 1)))? jbossHome.substring(0, jbossHome.length() - 1) : jbossHome;
            String log4JPropertyFile = jbossHome + "/standalone/configuration/log4j.properties";
            
            logger.info("Rule engine log path: " + log4JPropertyFile);
            try {
                p.load(new FileInputStream(log4JPropertyFile));
                PropertyConfigurator.configure(p);
            } catch (IOException e) {

            }
        }
    }
    
    public static void loggingTime(String ruleNo, long dateDiff){
        redirectLog();
        Logger logger = LoggerFactory.getLogger(Utils.class);
	    logger.info("Rule " + ruleNo + " is hit and completed in " + dateDiff + " milliseconds");
    }
    
    public static void logging(String s){
        redirectLog();
        Logger logger = LoggerFactory.getLogger(Utils.class);
	    logger.info(s);
    }
    
    public static void loggingDebug(String s){
        redirectLog();
        Logger logger = LoggerFactory.getLogger(Utils.class);
	    logger.debug(s);
    }


    public static int dateDiffinDays(Date dateFrom, Date dateTo){
        return (int)(dateTo.getTime() - dateFrom.getTime())/ (1000 * 60 * 60 * 24);
    }
    
    public static int dateDiffinMonths(Date startDate, Date endDate){
        Calendar startCalendar = new GregorianCalendar();
        startCalendar.setTime(startDate);
        Calendar endCalendar = new GregorianCalendar();
        endCalendar.setTime(endDate);

        int diffYear = endCalendar.get(Calendar.YEAR) - startCalendar.get(Calendar.YEAR);
        int diffMonth = diffYear * 12 + endCalendar.get(Calendar.MONTH) - startCalendar.get(Calendar.MONTH);
        return diffMonth;
    }
    
	public static boolean isValidProduct(String productType,String productSeries, String productSeriesHigh, String productSeriesLow, String...strings ){
	    System.out.println(productSeries);
		for (String s : strings){
			if (s.equals(productType))
				return true;
			if (s.equals(productSeries))
				return true;
			if (s.equals(productSeriesHigh))
				return true;
			if (s.equals(productSeriesLow))
				return true;
		}
		return false;
	}

    public Utils() {
    }

    public static Date workWithDates(Date date, String operator, int entity, int number) {
                    if (date != null) {
                              java.util.Calendar newCal = java.util.Calendar.getInstance();
                              newCal.setTime(date);
                              if (operator.equals("-")) { // normally we would add, except if we
                                                                                                    // want to subtract
                                        number = -number;
                              }
                              if (entity == 1) { // years
                                        newCal.add(java.util.Calendar.YEAR, number);
                              } else if (entity == 2) { // months
                                        newCal.add(java.util.Calendar.MONTH, number);
                              } else if (entity == 3) { // days
                                        newCal.add(java.util.Calendar.DATE, number);
                              } else if (entity == 4) { // hours
                                        newCal.add(java.util.Calendar.HOUR, number);
                              } else if (entity == 5) { // minutes
                                        newCal.add(java.util.Calendar.MINUTE, number);
                              } else if (entity == 6) { // seconds
                                        newCal.add(java.util.Calendar.SECOND, number);
                              }
                              return newCal.getTime();
 
                    } else {
                              return date;
                    }
          }


}